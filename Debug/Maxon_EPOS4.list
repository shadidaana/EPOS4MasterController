
Maxon_EPOS4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000293c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002ac4  08002ac4  00003ac4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ae4  08002ae4  00004038  2**0
                  CONTENTS
  4 .ARM          00000008  08002ae4  08002ae4  00003ae4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002aec  08002aec  00004038  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002aec  08002aec  00003aec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002af0  08002af0  00003af0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000038  20000000  08002af4  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00004038  2**0
                  CONTENTS
 10 .bss          00000080  20000038  20000038  00004038  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000b8  200000b8  00004038  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00004038  2**0
                  CONTENTS, READONLY
 13 .debug_info   00005cc8  00000000  00000000  00004068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000013de  00000000  00000000  00009d30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000598  00000000  00000000  0000b110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000041a  00000000  00000000  0000b6a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f450  00000000  00000000  0000bac2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00006498  00000000  00000000  0002af12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bf142  00000000  00000000  000313aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000f04ec  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000159c  00000000  00000000  000f0530  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  000f1acc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000038 	.word	0x20000038
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002aac 	.word	0x08002aac

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000003c 	.word	0x2000003c
 80001c4:	08002aac 	.word	0x08002aac

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b086      	sub	sp, #24
 80004bc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004be:	f000 fc95 	bl	8000dec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c2:	f000 f8ed 	bl	80006a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c6:	f000 f997 	bl	80007f8 <MX_GPIO_Init>
  MX_CAN1_Init();
 80004ca:	f000 f95f 	bl	800078c <MX_CAN1_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80004ce:	f000 f951 	bl	8000774 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  sFilterConfig.FilterBank = 0;
 80004d2:	4b6b      	ldr	r3, [pc, #428]	@ (8000680 <main+0x1c8>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	615a      	str	r2, [r3, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80004d8:	4b69      	ldr	r3, [pc, #420]	@ (8000680 <main+0x1c8>)
 80004da:	2200      	movs	r2, #0
 80004dc:	619a      	str	r2, [r3, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80004de:	4b68      	ldr	r3, [pc, #416]	@ (8000680 <main+0x1c8>)
 80004e0:	2201      	movs	r2, #1
 80004e2:	61da      	str	r2, [r3, #28]
  sFilterConfig.FilterIdHigh = 0x000;
 80004e4:	4b66      	ldr	r3, [pc, #408]	@ (8000680 <main+0x1c8>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterIdLow = 0x000;
 80004ea:	4b65      	ldr	r3, [pc, #404]	@ (8000680 <main+0x1c8>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterMaskIdHigh = 0x000;
 80004f0:	4b63      	ldr	r3, [pc, #396]	@ (8000680 <main+0x1c8>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterMaskIdLow = 0x000;
 80004f6:	4b62      	ldr	r3, [pc, #392]	@ (8000680 <main+0x1c8>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80004fc:	4b60      	ldr	r3, [pc, #384]	@ (8000680 <main+0x1c8>)
 80004fe:	2200      	movs	r2, #0
 8000500:	611a      	str	r2, [r3, #16]
  sFilterConfig.FilterActivation = ENABLE;
 8000502:	4b5f      	ldr	r3, [pc, #380]	@ (8000680 <main+0x1c8>)
 8000504:	2201      	movs	r2, #1
 8000506:	621a      	str	r2, [r3, #32]
  sFilterConfig.SlaveStartFilterBank = 14;
 8000508:	4b5d      	ldr	r3, [pc, #372]	@ (8000680 <main+0x1c8>)
 800050a:	220e      	movs	r2, #14
 800050c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 800050e:	495c      	ldr	r1, [pc, #368]	@ (8000680 <main+0x1c8>)
 8000510:	485c      	ldr	r0, [pc, #368]	@ (8000684 <main+0x1cc>)
 8000512:	f000 fdfd 	bl	8001110 <HAL_CAN_ConfigFilter>
 8000516:	4603      	mov	r3, r0
 8000518:	2b00      	cmp	r3, #0
 800051a:	d001      	beq.n	8000520 <main+0x68>
  {
    /* Filter configuration Error */
  	Error_Handler();
 800051c:	f000 fb84 	bl	8000c28 <Error_Handler>
  }

  HAL_Delay(50);
 8000520:	2032      	movs	r0, #50	@ 0x32
 8000522:	f000 fcd5 	bl	8000ed0 <HAL_Delay>
  if(HAL_CAN_Start(&hcan1)!= HAL_OK)
 8000526:	4857      	ldr	r0, [pc, #348]	@ (8000684 <main+0x1cc>)
 8000528:	f000 fed2 	bl	80012d0 <HAL_CAN_Start>
 800052c:	4603      	mov	r3, r0
 800052e:	2b00      	cmp	r3, #0
 8000530:	d001      	beq.n	8000536 <main+0x7e>
  {
    Error_Handler();
 8000532:	f000 fb79 	bl	8000c28 <Error_Handler>
  }
  if(HAL_CAN_ActivateNotification(&hcan1,CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK)
 8000536:	2103      	movs	r1, #3
 8000538:	4852      	ldr	r0, [pc, #328]	@ (8000684 <main+0x1cc>)
 800053a:	f001 f8ff 	bl	800173c <HAL_CAN_ActivateNotification>
 800053e:	4603      	mov	r3, r0
 8000540:	2b00      	cmp	r3, #0
 8000542:	d001      	beq.n	8000548 <main+0x90>
  {
    Error_Handler();
 8000544:	f000 fb70 	bl	8000c28 <Error_Handler>
  }

  int8_t res;
  /*For debugging*/
  start_motors=1;
 8000548:	4b4f      	ldr	r3, [pc, #316]	@ (8000688 <main+0x1d0>)
 800054a:	2201      	movs	r2, #1
 800054c:	701a      	strb	r2, [r3, #0]
  mode= CLOCKWISE;
 800054e:	4b4f      	ldr	r3, [pc, #316]	@ (800068c <main+0x1d4>)
 8000550:	2201      	movs	r2, #1
 8000552:	701a      	strb	r2, [r3, #0]
  speed =2000 ; /*0 - 9340*/
 8000554:	4b4e      	ldr	r3, [pc, #312]	@ (8000690 <main+0x1d8>)
 8000556:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800055a:	601a      	str	r2, [r3, #0]
  uint32_t position= 6000;
 800055c:	f241 7370 	movw	r3, #6000	@ 0x1770
 8000560:	613b      	str	r3, [r7, #16]
  uint8_t status;
  // 3. Send few frames to allow EPOS4 to synchronize to the CAN bit rate
  uint8_t sync_message[1] = {0x00};  // Empty SYNC message
 8000562:	2300      	movs	r3, #0
 8000564:	723b      	strb	r3, [r7, #8]
  for (int i = 0; i < 3; i++) {  // Sending 3 SYNC frames
 8000566:	2300      	movs	r3, #0
 8000568:	617b      	str	r3, [r7, #20]
 800056a:	e00c      	b.n	8000586 <main+0xce>
      send_can_message(1, SYNC_COB_ID, sync_message);
 800056c:	f107 0308 	add.w	r3, r7, #8
 8000570:	461a      	mov	r2, r3
 8000572:	2180      	movs	r1, #128	@ 0x80
 8000574:	2001      	movs	r0, #1
 8000576:	f000 fb3b 	bl	8000bf0 <send_can_message>
      HAL_Delay(2);
 800057a:	2002      	movs	r0, #2
 800057c:	f000 fca8 	bl	8000ed0 <HAL_Delay>
  for (int i = 0; i < 3; i++) {  // Sending 3 SYNC frames
 8000580:	697b      	ldr	r3, [r7, #20]
 8000582:	3301      	adds	r3, #1
 8000584:	617b      	str	r3, [r7, #20]
 8000586:	697b      	ldr	r3, [r7, #20]
 8000588:	2b02      	cmp	r3, #2
 800058a:	ddef      	ble.n	800056c <main+0xb4>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  uint32_t speed_neg = ~speed + 1;
 800058c:	4b40      	ldr	r3, [pc, #256]	@ (8000690 <main+0x1d8>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	425b      	negs	r3, r3
 8000592:	60fb      	str	r3, [r7, #12]
//	  while(rsvFlag==0){
//
//	  }
		if (start_motors == 1)
 8000594:	4b3c      	ldr	r3, [pc, #240]	@ (8000688 <main+0x1d0>)
 8000596:	f993 3000 	ldrsb.w	r3, [r3]
 800059a:	2b01      	cmp	r3, #1
 800059c:	d115      	bne.n	80005ca <main+0x112>
		{
			send_can_message(8, MOTOR_HEART_BEAT_CAN_ID , SET_PROFILE_VELOCITY_MODE_MESSAGE);
 800059e:	4a3d      	ldr	r2, [pc, #244]	@ (8000694 <main+0x1dc>)
 80005a0:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 80005a4:	2008      	movs	r0, #8
 80005a6:	f000 fb23 	bl	8000bf0 <send_can_message>
			HAL_Delay(2);
 80005aa:	2002      	movs	r0, #2
 80005ac:	f000 fc90 	bl	8000ed0 <HAL_Delay>
			motors_state= HEART_BEAT;
 80005b0:	4b39      	ldr	r3, [pc, #228]	@ (8000698 <main+0x1e0>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	701a      	strb	r2, [r3, #0]
			res = init_motor(motorNodeID);
 80005b6:	4b39      	ldr	r3, [pc, #228]	@ (800069c <main+0x1e4>)
 80005b8:	781b      	ldrb	r3, [r3, #0]
 80005ba:	4618      	mov	r0, r3
 80005bc:	f000 f9d8 	bl	8000970 <init_motor>
 80005c0:	4603      	mov	r3, r0
 80005c2:	72fb      	strb	r3, [r7, #11]
//			init_motor_Position(motorNodeID);
			start_motors = 0;
 80005c4:	4b30      	ldr	r3, [pc, #192]	@ (8000688 <main+0x1d0>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	701a      	strb	r2, [r3, #0]
		}
		  HAL_Delay(1000);
 80005ca:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005ce:	f000 fc7f 	bl	8000ed0 <HAL_Delay>
		if(mode == JOYSTICK){
 80005d2:	4b2e      	ldr	r3, [pc, #184]	@ (800068c <main+0x1d4>)
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	2b03      	cmp	r3, #3
 80005d8:	d0d8      	beq.n	800058c <main+0xd4>
		}
		else if (mode == CLOCKWISE)
 80005da:	4b2c      	ldr	r3, [pc, #176]	@ (800068c <main+0x1d4>)
 80005dc:	781b      	ldrb	r3, [r3, #0]
 80005de:	2b01      	cmp	r3, #1
 80005e0:	d10a      	bne.n	80005f8 <main+0x140>
		{
			res = Set_Motor_Speed(motorNodeID,speed);
 80005e2:	4b2e      	ldr	r3, [pc, #184]	@ (800069c <main+0x1e4>)
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	4a2a      	ldr	r2, [pc, #168]	@ (8000690 <main+0x1d8>)
 80005e8:	6812      	ldr	r2, [r2, #0]
 80005ea:	4611      	mov	r1, r2
 80005ec:	4618      	mov	r0, r3
 80005ee:	f000 fa0b 	bl	8000a08 <Set_Motor_Speed>
 80005f2:	4603      	mov	r3, r0
 80005f4:	72fb      	strb	r3, [r7, #11]
 80005f6:	e7c9      	b.n	800058c <main+0xd4>
		}
		else if (mode == COUNTERCLOCKWISE)
 80005f8:	4b24      	ldr	r3, [pc, #144]	@ (800068c <main+0x1d4>)
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	2b02      	cmp	r3, #2
 80005fe:	d108      	bne.n	8000612 <main+0x15a>
		{
			res = Set_Motor_Speed(motorNodeID, speed_neg);
 8000600:	4b26      	ldr	r3, [pc, #152]	@ (800069c <main+0x1e4>)
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	68f9      	ldr	r1, [r7, #12]
 8000606:	4618      	mov	r0, r3
 8000608:	f000 f9fe 	bl	8000a08 <Set_Motor_Speed>
 800060c:	4603      	mov	r3, r0
 800060e:	72fb      	strb	r3, [r7, #11]
 8000610:	e7bc      	b.n	800058c <main+0xd4>
		}

		else if (mode == STOP)
 8000612:	4b1e      	ldr	r3, [pc, #120]	@ (800068c <main+0x1d4>)
 8000614:	781b      	ldrb	r3, [r3, #0]
 8000616:	2b00      	cmp	r3, #0
 8000618:	d107      	bne.n	800062a <main+0x172>
		{
			res = stop_motor_with_brake(motorNodeID);
 800061a:	4b20      	ldr	r3, [pc, #128]	@ (800069c <main+0x1e4>)
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	4618      	mov	r0, r3
 8000620:	f000 fa9a 	bl	8000b58 <stop_motor_with_brake>
 8000624:	4603      	mov	r3, r0
 8000626:	72fb      	strb	r3, [r7, #11]
 8000628:	e7b0      	b.n	800058c <main+0xd4>
		}
		else if (mode == PAUSE)
 800062a:	4b18      	ldr	r3, [pc, #96]	@ (800068c <main+0x1d4>)
 800062c:	781b      	ldrb	r3, [r3, #0]
 800062e:	2b05      	cmp	r3, #5
 8000630:	d107      	bne.n	8000642 <main+0x18a>
		{
			res = stop_motor_without_brake(motorNodeID);
 8000632:	4b1a      	ldr	r3, [pc, #104]	@ (800069c <main+0x1e4>)
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	4618      	mov	r0, r3
 8000638:	f000 fab4 	bl	8000ba4 <stop_motor_without_brake>
 800063c:	4603      	mov	r3, r0
 800063e:	72fb      	strb	r3, [r7, #11]
 8000640:	e7a4      	b.n	800058c <main+0xd4>

		}
		else if (mode == POSITION){
 8000642:	4b12      	ldr	r3, [pc, #72]	@ (800068c <main+0x1d4>)
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	2b06      	cmp	r3, #6
 8000648:	d108      	bne.n	800065c <main+0x1a4>
			res = Set_Motor_Position(motorNodeID,position);
 800064a:	4b14      	ldr	r3, [pc, #80]	@ (800069c <main+0x1e4>)
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	6939      	ldr	r1, [r7, #16]
 8000650:	4618      	mov	r0, r3
 8000652:	f000 fa2d 	bl	8000ab0 <Set_Motor_Position>
 8000656:	4603      	mov	r3, r0
 8000658:	72fb      	strb	r3, [r7, #11]
 800065a:	e797      	b.n	800058c <main+0xd4>
		}
		else if (mode != NONE)
 800065c:	4b0b      	ldr	r3, [pc, #44]	@ (800068c <main+0x1d4>)
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	2b04      	cmp	r3, #4
 8000662:	d093      	beq.n	800058c <main+0xd4>
		{
			uint8_t d[2] = {1, 1};
 8000664:	f240 1301 	movw	r3, #257	@ 0x101
 8000668:	80bb      	strh	r3, [r7, #4]
			send_can_message(2, 0x9F, d);
 800066a:	1d3b      	adds	r3, r7, #4
 800066c:	461a      	mov	r2, r3
 800066e:	219f      	movs	r1, #159	@ 0x9f
 8000670:	2002      	movs	r0, #2
 8000672:	f000 fabd 	bl	8000bf0 <send_can_message>
			mode = NONE;
 8000676:	4b05      	ldr	r3, [pc, #20]	@ (800068c <main+0x1d4>)
 8000678:	2204      	movs	r2, #4
 800067a:	701a      	strb	r2, [r3, #0]
  {
 800067c:	e786      	b.n	800058c <main+0xd4>
 800067e:	bf00      	nop
 8000680:	20000088 	.word	0x20000088
 8000684:	20000054 	.word	0x20000054
 8000688:	2000007c 	.word	0x2000007c
 800068c:	20000084 	.word	0x20000084
 8000690:	20000080 	.word	0x20000080
 8000694:	20000000 	.word	0x20000000
 8000698:	2000007d 	.word	0x2000007d
 800069c:	20000028 	.word	0x20000028

080006a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b094      	sub	sp, #80	@ 0x50
 80006a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006a6:	f107 0320 	add.w	r3, r7, #32
 80006aa:	2230      	movs	r2, #48	@ 0x30
 80006ac:	2100      	movs	r1, #0
 80006ae:	4618      	mov	r0, r3
 80006b0:	f002 f9d0 	bl	8002a54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b4:	f107 030c 	add.w	r3, r7, #12
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
 80006bc:	605a      	str	r2, [r3, #4]
 80006be:	609a      	str	r2, [r3, #8]
 80006c0:	60da      	str	r2, [r3, #12]
 80006c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c4:	2300      	movs	r3, #0
 80006c6:	60bb      	str	r3, [r7, #8]
 80006c8:	4b28      	ldr	r3, [pc, #160]	@ (800076c <SystemClock_Config+0xcc>)
 80006ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006cc:	4a27      	ldr	r2, [pc, #156]	@ (800076c <SystemClock_Config+0xcc>)
 80006ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006d2:	6413      	str	r3, [r2, #64]	@ 0x40
 80006d4:	4b25      	ldr	r3, [pc, #148]	@ (800076c <SystemClock_Config+0xcc>)
 80006d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006dc:	60bb      	str	r3, [r7, #8]
 80006de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006e0:	2300      	movs	r3, #0
 80006e2:	607b      	str	r3, [r7, #4]
 80006e4:	4b22      	ldr	r3, [pc, #136]	@ (8000770 <SystemClock_Config+0xd0>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	4a21      	ldr	r2, [pc, #132]	@ (8000770 <SystemClock_Config+0xd0>)
 80006ea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006ee:	6013      	str	r3, [r2, #0]
 80006f0:	4b1f      	ldr	r3, [pc, #124]	@ (8000770 <SystemClock_Config+0xd0>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80006f8:	607b      	str	r3, [r7, #4]
 80006fa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006fc:	2301      	movs	r3, #1
 80006fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000700:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000704:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000706:	2302      	movs	r3, #2
 8000708:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800070a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800070e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000710:	2304      	movs	r3, #4
 8000712:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000714:	23a0      	movs	r3, #160	@ 0xa0
 8000716:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000718:	2302      	movs	r3, #2
 800071a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800071c:	2304      	movs	r3, #4
 800071e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000720:	f107 0320 	add.w	r3, r7, #32
 8000724:	4618      	mov	r0, r3
 8000726:	f001 fd31 	bl	800218c <HAL_RCC_OscConfig>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000730:	f000 fa7a 	bl	8000c28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000734:	230f      	movs	r3, #15
 8000736:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000738:	2302      	movs	r3, #2
 800073a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800073c:	2300      	movs	r3, #0
 800073e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000740:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000744:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000746:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800074a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800074c:	f107 030c 	add.w	r3, r7, #12
 8000750:	2105      	movs	r1, #5
 8000752:	4618      	mov	r0, r3
 8000754:	f001 ff92 	bl	800267c <HAL_RCC_ClockConfig>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800075e:	f000 fa63 	bl	8000c28 <Error_Handler>
  }
}
 8000762:	bf00      	nop
 8000764:	3750      	adds	r7, #80	@ 0x50
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	40023800 	.word	0x40023800
 8000770:	40007000 	.word	0x40007000

08000774 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* CAN1_RX0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000778:	2200      	movs	r2, #0
 800077a:	2100      	movs	r1, #0
 800077c:	2014      	movs	r0, #20
 800077e:	f001 fb18 	bl	8001db2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000782:	2014      	movs	r0, #20
 8000784:	f001 fb31 	bl	8001dea <HAL_NVIC_EnableIRQ>
}
 8000788:	bf00      	nop
 800078a:	bd80      	pop	{r7, pc}

0800078c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000790:	4b17      	ldr	r3, [pc, #92]	@ (80007f0 <MX_CAN1_Init+0x64>)
 8000792:	4a18      	ldr	r2, [pc, #96]	@ (80007f4 <MX_CAN1_Init+0x68>)
 8000794:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 8;
 8000796:	4b16      	ldr	r3, [pc, #88]	@ (80007f0 <MX_CAN1_Init+0x64>)
 8000798:	2208      	movs	r2, #8
 800079a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800079c:	4b14      	ldr	r3, [pc, #80]	@ (80007f0 <MX_CAN1_Init+0x64>)
 800079e:	2200      	movs	r2, #0
 80007a0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80007a2:	4b13      	ldr	r3, [pc, #76]	@ (80007f0 <MX_CAN1_Init+0x64>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_5TQ;
 80007a8:	4b11      	ldr	r3, [pc, #68]	@ (80007f0 <MX_CAN1_Init+0x64>)
 80007aa:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80007ae:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 80007b0:	4b0f      	ldr	r3, [pc, #60]	@ (80007f0 <MX_CAN1_Init+0x64>)
 80007b2:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 80007b6:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80007b8:	4b0d      	ldr	r3, [pc, #52]	@ (80007f0 <MX_CAN1_Init+0x64>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80007be:	4b0c      	ldr	r3, [pc, #48]	@ (80007f0 <MX_CAN1_Init+0x64>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80007c4:	4b0a      	ldr	r3, [pc, #40]	@ (80007f0 <MX_CAN1_Init+0x64>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80007ca:	4b09      	ldr	r3, [pc, #36]	@ (80007f0 <MX_CAN1_Init+0x64>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80007d0:	4b07      	ldr	r3, [pc, #28]	@ (80007f0 <MX_CAN1_Init+0x64>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80007d6:	4b06      	ldr	r3, [pc, #24]	@ (80007f0 <MX_CAN1_Init+0x64>)
 80007d8:	2200      	movs	r2, #0
 80007da:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80007dc:	4804      	ldr	r0, [pc, #16]	@ (80007f0 <MX_CAN1_Init+0x64>)
 80007de:	f000 fb9b 	bl	8000f18 <HAL_CAN_Init>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80007e8:	f000 fa1e 	bl	8000c28 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80007ec:	bf00      	nop
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	20000054 	.word	0x20000054
 80007f4:	40006400 	.word	0x40006400

080007f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b083      	sub	sp, #12
 80007fc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	607b      	str	r3, [r7, #4]
 8000802:	4b10      	ldr	r3, [pc, #64]	@ (8000844 <MX_GPIO_Init+0x4c>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000806:	4a0f      	ldr	r2, [pc, #60]	@ (8000844 <MX_GPIO_Init+0x4c>)
 8000808:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800080c:	6313      	str	r3, [r2, #48]	@ 0x30
 800080e:	4b0d      	ldr	r3, [pc, #52]	@ (8000844 <MX_GPIO_Init+0x4c>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000812:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000816:	607b      	str	r3, [r7, #4]
 8000818:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	603b      	str	r3, [r7, #0]
 800081e:	4b09      	ldr	r3, [pc, #36]	@ (8000844 <MX_GPIO_Init+0x4c>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000822:	4a08      	ldr	r2, [pc, #32]	@ (8000844 <MX_GPIO_Init+0x4c>)
 8000824:	f043 0302 	orr.w	r3, r3, #2
 8000828:	6313      	str	r3, [r2, #48]	@ 0x30
 800082a:	4b06      	ldr	r3, [pc, #24]	@ (8000844 <MX_GPIO_Init+0x4c>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082e:	f003 0302 	and.w	r3, r3, #2
 8000832:	603b      	str	r3, [r7, #0]
 8000834:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000836:	bf00      	nop
 8000838:	370c      	adds	r7, #12
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop
 8000844:	40023800 	.word	0x40023800

08000848 <CAN1_RX0_IRQHandler>:

/* USER CODE BEGIN 4 */
void CAN1_RX0_IRQHandler(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b08a      	sub	sp, #40	@ 0x28
 800084c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN CAN1_RX0_IRQn 0 */

	/* USER CODE END CAN1_RX0_IRQn 0 */
	HAL_CAN_IRQHandler(&hcan1);
 800084e:	4840      	ldr	r0, [pc, #256]	@ (8000950 <CAN1_RX0_IRQHandler+0x108>)
 8000850:	f000 ff9a 	bl	8001788 <HAL_CAN_IRQHandler>
	/* USER CODE BEGIN CAN1_RX0_IRQn 1 */

	CAN_RxHeaderTypeDef RxHeader;
	uint8_t RxData[8];
	HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData);
 8000854:	1d3b      	adds	r3, r7, #4
 8000856:	f107 020c 	add.w	r2, r7, #12
 800085a:	2100      	movs	r1, #0
 800085c:	483c      	ldr	r0, [pc, #240]	@ (8000950 <CAN1_RX0_IRQHandler+0x108>)
 800085e:	f000 fe4b 	bl	80014f8 <HAL_CAN_GetRxMessage>
	rsvFlag=1;
 8000862:	4b3c      	ldr	r3, [pc, #240]	@ (8000954 <CAN1_RX0_IRQHandler+0x10c>)
 8000864:	2201      	movs	r2, #1
 8000866:	601a      	str	r2, [r3, #0]
	if (RxHeader.StdId == 0x0D9)
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	2bd9      	cmp	r3, #217	@ 0xd9
 800086c:	d104      	bne.n	8000878 <CAN1_RX0_IRQHandler+0x30>
	{
			HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_15);
 800086e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000872:	4839      	ldr	r0, [pc, #228]	@ (8000958 <CAN1_RX0_IRQHandler+0x110>)
 8000874:	f001 fc70 	bl	8002158 <HAL_GPIO_TogglePin>
	}

	if (RxHeader.StdId == MOTOR_RESPONSE_CAN_ID + motorNodeID)
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	4a38      	ldr	r2, [pc, #224]	@ (800095c <CAN1_RX0_IRQHandler+0x114>)
 800087c:	7812      	ldrb	r2, [r2, #0]
 800087e:	f502 62b0 	add.w	r2, r2, #1408	@ 0x580
 8000882:	4293      	cmp	r3, r2
 8000884:	d133      	bne.n	80008ee <CAN1_RX0_IRQHandler+0xa6>
	{
		if (motors_state == SET_RPM_STATE || motors_state == SET_POSITION)
 8000886:	4b36      	ldr	r3, [pc, #216]	@ (8000960 <CAN1_RX0_IRQHandler+0x118>)
 8000888:	781b      	ldrb	r3, [r3, #0]
 800088a:	2b05      	cmp	r3, #5
 800088c:	d003      	beq.n	8000896 <CAN1_RX0_IRQHandler+0x4e>
 800088e:	4b34      	ldr	r3, [pc, #208]	@ (8000960 <CAN1_RX0_IRQHandler+0x118>)
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	2b06      	cmp	r3, #6
 8000894:	d103      	bne.n	800089e <CAN1_RX0_IRQHandler+0x56>
		{
			motors_state = CONTROL_WORD_SWITCH_ON_ENABLE_STATE;
 8000896:	4b32      	ldr	r3, [pc, #200]	@ (8000960 <CAN1_RX0_IRQHandler+0x118>)
 8000898:	2204      	movs	r2, #4
 800089a:	701a      	strb	r2, [r3, #0]
 800089c:	e055      	b.n	800094a <CAN1_RX0_IRQHandler+0x102>
		}
		else if (motors_state == CONTROL_WORD_SWITCH_ON_ENABLE_STATE)
 800089e:	4b30      	ldr	r3, [pc, #192]	@ (8000960 <CAN1_RX0_IRQHandler+0x118>)
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	2b04      	cmp	r3, #4
 80008a4:	d103      	bne.n	80008ae <CAN1_RX0_IRQHandler+0x66>
		{
			motors_state = INITIALIZED;
 80008a6:	4b2e      	ldr	r3, [pc, #184]	@ (8000960 <CAN1_RX0_IRQHandler+0x118>)
 80008a8:	2209      	movs	r2, #9
 80008aa:	701a      	strb	r2, [r3, #0]
		}
		else if (motors_state == CONTROL_WORD_SHUTDOWN_STATE)
		{
			motors_state = CONTROL_WORD_SWITCH_ON_ENABLE_STATE;
		}
		return;
 80008ac:	e04c      	b.n	8000948 <CAN1_RX0_IRQHandler+0x100>
		else if (motors_state == STOP_STATE)
 80008ae:	4b2c      	ldr	r3, [pc, #176]	@ (8000960 <CAN1_RX0_IRQHandler+0x118>)
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	2b07      	cmp	r3, #7
 80008b4:	d103      	bne.n	80008be <CAN1_RX0_IRQHandler+0x76>
			motors_state = INITIALIZED;
 80008b6:	4b2a      	ldr	r3, [pc, #168]	@ (8000960 <CAN1_RX0_IRQHandler+0x118>)
 80008b8:	2209      	movs	r2, #9
 80008ba:	701a      	strb	r2, [r3, #0]
		return;
 80008bc:	e044      	b.n	8000948 <CAN1_RX0_IRQHandler+0x100>
		else if (motors_state == PAUSE_STATE)
 80008be:	4b28      	ldr	r3, [pc, #160]	@ (8000960 <CAN1_RX0_IRQHandler+0x118>)
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	2b08      	cmp	r3, #8
 80008c4:	d103      	bne.n	80008ce <CAN1_RX0_IRQHandler+0x86>
			motors_state = INITIALIZED;
 80008c6:	4b26      	ldr	r3, [pc, #152]	@ (8000960 <CAN1_RX0_IRQHandler+0x118>)
 80008c8:	2209      	movs	r2, #9
 80008ca:	701a      	strb	r2, [r3, #0]
		return;
 80008cc:	e03c      	b.n	8000948 <CAN1_RX0_IRQHandler+0x100>
		else if (motors_state == SET_PROFILE_VELOCITY_STATE)
 80008ce:	4b24      	ldr	r3, [pc, #144]	@ (8000960 <CAN1_RX0_IRQHandler+0x118>)
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	2b01      	cmp	r3, #1
 80008d4:	d103      	bne.n	80008de <CAN1_RX0_IRQHandler+0x96>
			motors_state = CONTROL_WORD_SHUTDOWN_STATE;
 80008d6:	4b22      	ldr	r3, [pc, #136]	@ (8000960 <CAN1_RX0_IRQHandler+0x118>)
 80008d8:	2203      	movs	r2, #3
 80008da:	701a      	strb	r2, [r3, #0]
		return;
 80008dc:	e034      	b.n	8000948 <CAN1_RX0_IRQHandler+0x100>
		else if (motors_state == CONTROL_WORD_SHUTDOWN_STATE)
 80008de:	4b20      	ldr	r3, [pc, #128]	@ (8000960 <CAN1_RX0_IRQHandler+0x118>)
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	2b03      	cmp	r3, #3
 80008e4:	d130      	bne.n	8000948 <CAN1_RX0_IRQHandler+0x100>
			motors_state = CONTROL_WORD_SWITCH_ON_ENABLE_STATE;
 80008e6:	4b1e      	ldr	r3, [pc, #120]	@ (8000960 <CAN1_RX0_IRQHandler+0x118>)
 80008e8:	2204      	movs	r2, #4
 80008ea:	701a      	strb	r2, [r3, #0]
		return;
 80008ec:	e02c      	b.n	8000948 <CAN1_RX0_IRQHandler+0x100>
	}

	else if (RxHeader.StdId == MOVE_MOTORS_CAN_ID)
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	2b91      	cmp	r3, #145	@ 0x91
 80008f2:	d02a      	beq.n	800094a <CAN1_RX0_IRQHandler+0x102>
	{

	}

	else if (RxHeader.StdId == PAUSE_MOTORS_CAN_ID)
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	2b92      	cmp	r3, #146	@ 0x92
 80008f8:	d109      	bne.n	800090e <CAN1_RX0_IRQHandler+0xc6>
	{
		mode = PAUSE;
 80008fa:	4b1a      	ldr	r3, [pc, #104]	@ (8000964 <CAN1_RX0_IRQHandler+0x11c>)
 80008fc:	2205      	movs	r2, #5
 80008fe:	701a      	strb	r2, [r3, #0]
		speed = 0;
 8000900:	4b19      	ldr	r3, [pc, #100]	@ (8000968 <CAN1_RX0_IRQHandler+0x120>)
 8000902:	2200      	movs	r2, #0
 8000904:	601a      	str	r2, [r3, #0]
		motors_state = PAUSE_STATE;
 8000906:	4b16      	ldr	r3, [pc, #88]	@ (8000960 <CAN1_RX0_IRQHandler+0x118>)
 8000908:	2208      	movs	r2, #8
 800090a:	701a      	strb	r2, [r3, #0]
 800090c:	e01d      	b.n	800094a <CAN1_RX0_IRQHandler+0x102>
	}
	else if (RxHeader.StdId == STOP_MOTORS_CAN_ID)
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	2b93      	cmp	r3, #147	@ 0x93
 8000912:	d109      	bne.n	8000928 <CAN1_RX0_IRQHandler+0xe0>
	{
		mode = STOP;
 8000914:	4b13      	ldr	r3, [pc, #76]	@ (8000964 <CAN1_RX0_IRQHandler+0x11c>)
 8000916:	2200      	movs	r2, #0
 8000918:	701a      	strb	r2, [r3, #0]
		speed = 0;
 800091a:	4b13      	ldr	r3, [pc, #76]	@ (8000968 <CAN1_RX0_IRQHandler+0x120>)
 800091c:	2200      	movs	r2, #0
 800091e:	601a      	str	r2, [r3, #0]
		motors_state = STOP_STATE;
 8000920:	4b0f      	ldr	r3, [pc, #60]	@ (8000960 <CAN1_RX0_IRQHandler+0x118>)
 8000922:	2207      	movs	r2, #7
 8000924:	701a      	strb	r2, [r3, #0]
 8000926:	e010      	b.n	800094a <CAN1_RX0_IRQHandler+0x102>
	}
	else if (RxHeader.StdId == START_MOTORS_CAN_ID) {
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	2b90      	cmp	r3, #144	@ 0x90
 800092c:	d10d      	bne.n	800094a <CAN1_RX0_IRQHandler+0x102>
		speed = 0;
 800092e:	4b0e      	ldr	r3, [pc, #56]	@ (8000968 <CAN1_RX0_IRQHandler+0x120>)
 8000930:	2200      	movs	r2, #0
 8000932:	601a      	str	r2, [r3, #0]
		mode = START;
 8000934:	4b0b      	ldr	r3, [pc, #44]	@ (8000964 <CAN1_RX0_IRQHandler+0x11c>)
 8000936:	2207      	movs	r2, #7
 8000938:	701a      	strb	r2, [r3, #0]
		start_motors = 1;
 800093a:	4b0c      	ldr	r3, [pc, #48]	@ (800096c <CAN1_RX0_IRQHandler+0x124>)
 800093c:	2201      	movs	r2, #1
 800093e:	701a      	strb	r2, [r3, #0]
		motors_state = HEART_BEAT;
 8000940:	4b07      	ldr	r3, [pc, #28]	@ (8000960 <CAN1_RX0_IRQHandler+0x118>)
 8000942:	2200      	movs	r2, #0
 8000944:	701a      	strb	r2, [r3, #0]
 8000946:	e000      	b.n	800094a <CAN1_RX0_IRQHandler+0x102>
		return;
 8000948:	bf00      	nop
	}

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 800094a:	3728      	adds	r7, #40	@ 0x28
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	20000054 	.word	0x20000054
 8000954:	200000b0 	.word	0x200000b0
 8000958:	40020400 	.word	0x40020400
 800095c:	20000028 	.word	0x20000028
 8000960:	2000007d 	.word	0x2000007d
 8000964:	20000084 	.word	0x20000084
 8000968:	20000080 	.word	0x20000080
 800096c:	2000007c 	.word	0x2000007c

08000970 <init_motor>:

int8_t init_motor(uint8_t nodeID)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
 8000976:	4603      	mov	r3, r0
 8000978:	71fb      	strb	r3, [r7, #7]
	//HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
	if(motors_state!= HEART_BEAT){
 800097a:	4b1f      	ldr	r3, [pc, #124]	@ (80009f8 <init_motor+0x88>)
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	2b00      	cmp	r3, #0
 8000980:	d002      	beq.n	8000988 <init_motor+0x18>
		//HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
		return -1;
 8000982:	f04f 33ff 	mov.w	r3, #4294967295
 8000986:	e033      	b.n	80009f0 <init_motor+0x80>
	}
//	HAL_Delay(1);
	motors_state= SET_PROFILE_VELOCITY_STATE;
 8000988:	4b1b      	ldr	r3, [pc, #108]	@ (80009f8 <init_motor+0x88>)
 800098a:	2201      	movs	r2, #1
 800098c:	701a      	strb	r2, [r3, #0]
	send_can_message(8, MOTOR_COMMAND_CAN_ID + nodeID, SET_PROFILE_VELOCITY_MODE_MESSAGE);
 800098e:	79fb      	ldrb	r3, [r7, #7]
 8000990:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 8000994:	4a19      	ldr	r2, [pc, #100]	@ (80009fc <init_motor+0x8c>)
 8000996:	4619      	mov	r1, r3
 8000998:	2008      	movs	r0, #8
 800099a:	f000 f929 	bl	8000bf0 <send_can_message>
	while(motors_state != CONTROL_WORD_SHUTDOWN_STATE){
 800099e:	e002      	b.n	80009a6 <init_motor+0x36>
		HAL_Delay(1);
 80009a0:	2001      	movs	r0, #1
 80009a2:	f000 fa95 	bl	8000ed0 <HAL_Delay>
	while(motors_state != CONTROL_WORD_SHUTDOWN_STATE){
 80009a6:	4b14      	ldr	r3, [pc, #80]	@ (80009f8 <init_motor+0x88>)
 80009a8:	781b      	ldrb	r3, [r3, #0]
 80009aa:	2b03      	cmp	r3, #3
 80009ac:	d1f8      	bne.n	80009a0 <init_motor+0x30>
	}
	send_can_message(8, MOTOR_COMMAND_CAN_ID + nodeID, CONTROL_WORD_SHUTDOWN_MESSAGE);
 80009ae:	79fb      	ldrb	r3, [r7, #7]
 80009b0:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 80009b4:	4a12      	ldr	r2, [pc, #72]	@ (8000a00 <init_motor+0x90>)
 80009b6:	4619      	mov	r1, r3
 80009b8:	2008      	movs	r0, #8
 80009ba:	f000 f919 	bl	8000bf0 <send_can_message>
	while(motors_state != CONTROL_WORD_SWITCH_ON_ENABLE_STATE){
 80009be:	e002      	b.n	80009c6 <init_motor+0x56>
		HAL_Delay(1);
 80009c0:	2001      	movs	r0, #1
 80009c2:	f000 fa85 	bl	8000ed0 <HAL_Delay>
	while(motors_state != CONTROL_WORD_SWITCH_ON_ENABLE_STATE){
 80009c6:	4b0c      	ldr	r3, [pc, #48]	@ (80009f8 <init_motor+0x88>)
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	2b04      	cmp	r3, #4
 80009cc:	d1f8      	bne.n	80009c0 <init_motor+0x50>
	}
	send_can_message(8, MOTOR_COMMAND_CAN_ID + nodeID, CONTROL_WORD_SWITCH_ON_ENABLE_MESSAGE);
 80009ce:	79fb      	ldrb	r3, [r7, #7]
 80009d0:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 80009d4:	4a0b      	ldr	r2, [pc, #44]	@ (8000a04 <init_motor+0x94>)
 80009d6:	4619      	mov	r1, r3
 80009d8:	2008      	movs	r0, #8
 80009da:	f000 f909 	bl	8000bf0 <send_can_message>

	while(motors_state != INITIALIZED){
 80009de:	e002      	b.n	80009e6 <init_motor+0x76>
		HAL_Delay(1);
 80009e0:	2001      	movs	r0, #1
 80009e2:	f000 fa75 	bl	8000ed0 <HAL_Delay>
	while(motors_state != INITIALIZED){
 80009e6:	4b04      	ldr	r3, [pc, #16]	@ (80009f8 <init_motor+0x88>)
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	2b09      	cmp	r3, #9
 80009ec:	d1f8      	bne.n	80009e0 <init_motor+0x70>
	}

	return 0;
 80009ee:	2300      	movs	r3, #0
}
 80009f0:	4618      	mov	r0, r3
 80009f2:	3708      	adds	r7, #8
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	2000007d 	.word	0x2000007d
 80009fc:	20000000 	.word	0x20000000
 8000a00:	20000008 	.word	0x20000008
 8000a04:	20000010 	.word	0x20000010

08000a08 <Set_Motor_Speed>:
	}

	return 0;
}
int8_t Set_Motor_Speed(uint8_t nodeID, uint32_t speed)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b084      	sub	sp, #16
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	4603      	mov	r3, r0
 8000a10:	6039      	str	r1, [r7, #0]
 8000a12:	71fb      	strb	r3, [r7, #7]
	if(motors_state != INITIALIZED){
 8000a14:	4b23      	ldr	r3, [pc, #140]	@ (8000aa4 <Set_Motor_Speed+0x9c>)
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	2b09      	cmp	r3, #9
 8000a1a:	d002      	beq.n	8000a22 <Set_Motor_Speed+0x1a>
		//HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
		return -1;
 8000a1c:	f04f 33ff 	mov.w	r3, #4294967295
 8000a20:	e03b      	b.n	8000a9a <Set_Motor_Speed+0x92>
	}
	uint8_t SET_RPM_MESSAGE[8]={0x22, 0xff, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00};
 8000a22:	4a21      	ldr	r2, [pc, #132]	@ (8000aa8 <Set_Motor_Speed+0xa0>)
 8000a24:	f107 0308 	add.w	r3, r7, #8
 8000a28:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a2c:	e883 0003 	stmia.w	r3, {r0, r1}

	SET_RPM_MESSAGE[7] = speed >> 24;
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	0e1b      	lsrs	r3, r3, #24
 8000a34:	b2db      	uxtb	r3, r3
 8000a36:	73fb      	strb	r3, [r7, #15]
	SET_RPM_MESSAGE[6] = speed >> 16;
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	0c1b      	lsrs	r3, r3, #16
 8000a3c:	b2db      	uxtb	r3, r3
 8000a3e:	73bb      	strb	r3, [r7, #14]
	SET_RPM_MESSAGE[5] = speed >> 8;
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	0a1b      	lsrs	r3, r3, #8
 8000a44:	b2db      	uxtb	r3, r3
 8000a46:	737b      	strb	r3, [r7, #13]
	SET_RPM_MESSAGE[4] = speed;
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	b2db      	uxtb	r3, r3
 8000a4c:	733b      	strb	r3, [r7, #12]
	motors_state = SET_RPM_STATE;
 8000a4e:	4b15      	ldr	r3, [pc, #84]	@ (8000aa4 <Set_Motor_Speed+0x9c>)
 8000a50:	2205      	movs	r2, #5
 8000a52:	701a      	strb	r2, [r3, #0]
	send_can_message(8, MOTOR_COMMAND_CAN_ID + nodeID, SET_RPM_MESSAGE);
 8000a54:	79fb      	ldrb	r3, [r7, #7]
 8000a56:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	f107 0308 	add.w	r3, r7, #8
 8000a60:	461a      	mov	r2, r3
 8000a62:	2008      	movs	r0, #8
 8000a64:	f000 f8c4 	bl	8000bf0 <send_can_message>
	while (motors_state != CONTROL_WORD_SWITCH_ON_ENABLE_STATE){
 8000a68:	e002      	b.n	8000a70 <Set_Motor_Speed+0x68>
		HAL_Delay(1);
 8000a6a:	2001      	movs	r0, #1
 8000a6c:	f000 fa30 	bl	8000ed0 <HAL_Delay>
	while (motors_state != CONTROL_WORD_SWITCH_ON_ENABLE_STATE){
 8000a70:	4b0c      	ldr	r3, [pc, #48]	@ (8000aa4 <Set_Motor_Speed+0x9c>)
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	2b04      	cmp	r3, #4
 8000a76:	d1f8      	bne.n	8000a6a <Set_Motor_Speed+0x62>
	}
	send_can_message(8, MOTOR_COMMAND_CAN_ID + nodeID, CONTROL_WORD_SWITCH_ON_ENABLE_MESSAGE);
 8000a78:	79fb      	ldrb	r3, [r7, #7]
 8000a7a:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 8000a7e:	4a0b      	ldr	r2, [pc, #44]	@ (8000aac <Set_Motor_Speed+0xa4>)
 8000a80:	4619      	mov	r1, r3
 8000a82:	2008      	movs	r0, #8
 8000a84:	f000 f8b4 	bl	8000bf0 <send_can_message>

	while (motors_state != INITIALIZED){
 8000a88:	e002      	b.n	8000a90 <Set_Motor_Speed+0x88>
		HAL_Delay(1);
 8000a8a:	2001      	movs	r0, #1
 8000a8c:	f000 fa20 	bl	8000ed0 <HAL_Delay>
	while (motors_state != INITIALIZED){
 8000a90:	4b04      	ldr	r3, [pc, #16]	@ (8000aa4 <Set_Motor_Speed+0x9c>)
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	2b09      	cmp	r3, #9
 8000a96:	d1f8      	bne.n	8000a8a <Set_Motor_Speed+0x82>
	}
	return 0;
 8000a98:	2300      	movs	r3, #0
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	3710      	adds	r7, #16
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	2000007d 	.word	0x2000007d
 8000aa8:	08002ac4 	.word	0x08002ac4
 8000aac:	20000010 	.word	0x20000010

08000ab0 <Set_Motor_Position>:

int8_t Set_Motor_Position(uint8_t nodeID, uint32_t position)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b084      	sub	sp, #16
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	6039      	str	r1, [r7, #0]
 8000aba:	71fb      	strb	r3, [r7, #7]
	if(motors_state != INITIALIZED){
 8000abc:	4b23      	ldr	r3, [pc, #140]	@ (8000b4c <Set_Motor_Position+0x9c>)
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	2b09      	cmp	r3, #9
 8000ac2:	d002      	beq.n	8000aca <Set_Motor_Position+0x1a>
		//HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
		return -1;
 8000ac4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ac8:	e03b      	b.n	8000b42 <Set_Motor_Position+0x92>
	}
	uint8_t SET_POSISTION_MESSAGE[8]={0x22, 0x7A, 0x60, 0x00, 0xAE, 0x08, 0x00, 0x00};
 8000aca:	4a21      	ldr	r2, [pc, #132]	@ (8000b50 <Set_Motor_Position+0xa0>)
 8000acc:	f107 0308 	add.w	r3, r7, #8
 8000ad0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ad4:	e883 0003 	stmia.w	r3, {r0, r1}

	SET_POSISTION_MESSAGE[7] = position >> 24;
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	0e1b      	lsrs	r3, r3, #24
 8000adc:	b2db      	uxtb	r3, r3
 8000ade:	73fb      	strb	r3, [r7, #15]
	SET_POSISTION_MESSAGE[6] = position >> 16;
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	0c1b      	lsrs	r3, r3, #16
 8000ae4:	b2db      	uxtb	r3, r3
 8000ae6:	73bb      	strb	r3, [r7, #14]
	SET_POSISTION_MESSAGE[5] = position >> 8;
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	0a1b      	lsrs	r3, r3, #8
 8000aec:	b2db      	uxtb	r3, r3
 8000aee:	737b      	strb	r3, [r7, #13]
	SET_POSISTION_MESSAGE[4] = position;
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	b2db      	uxtb	r3, r3
 8000af4:	733b      	strb	r3, [r7, #12]
	motors_state = SET_POSITION;
 8000af6:	4b15      	ldr	r3, [pc, #84]	@ (8000b4c <Set_Motor_Position+0x9c>)
 8000af8:	2206      	movs	r2, #6
 8000afa:	701a      	strb	r2, [r3, #0]
	send_can_message(8, MOTOR_COMMAND_CAN_ID + nodeID, SET_POSISTION_MESSAGE);
 8000afc:	79fb      	ldrb	r3, [r7, #7]
 8000afe:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 8000b02:	4619      	mov	r1, r3
 8000b04:	f107 0308 	add.w	r3, r7, #8
 8000b08:	461a      	mov	r2, r3
 8000b0a:	2008      	movs	r0, #8
 8000b0c:	f000 f870 	bl	8000bf0 <send_can_message>
	while (motors_state != CONTROL_WORD_SWITCH_ON_ENABLE_STATE){
 8000b10:	e002      	b.n	8000b18 <Set_Motor_Position+0x68>
		HAL_Delay(1);
 8000b12:	2001      	movs	r0, #1
 8000b14:	f000 f9dc 	bl	8000ed0 <HAL_Delay>
	while (motors_state != CONTROL_WORD_SWITCH_ON_ENABLE_STATE){
 8000b18:	4b0c      	ldr	r3, [pc, #48]	@ (8000b4c <Set_Motor_Position+0x9c>)
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	2b04      	cmp	r3, #4
 8000b1e:	d1f8      	bne.n	8000b12 <Set_Motor_Position+0x62>
	}
	send_can_message(8, MOTOR_COMMAND_CAN_ID + nodeID, CONTROL_WORD_SWITCH_ON_ENABLE_MESSAGE);
 8000b20:	79fb      	ldrb	r3, [r7, #7]
 8000b22:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 8000b26:	4a0b      	ldr	r2, [pc, #44]	@ (8000b54 <Set_Motor_Position+0xa4>)
 8000b28:	4619      	mov	r1, r3
 8000b2a:	2008      	movs	r0, #8
 8000b2c:	f000 f860 	bl	8000bf0 <send_can_message>

	while (motors_state != INITIALIZED){
 8000b30:	e002      	b.n	8000b38 <Set_Motor_Position+0x88>
		HAL_Delay(1);
 8000b32:	2001      	movs	r0, #1
 8000b34:	f000 f9cc 	bl	8000ed0 <HAL_Delay>
	while (motors_state != INITIALIZED){
 8000b38:	4b04      	ldr	r3, [pc, #16]	@ (8000b4c <Set_Motor_Position+0x9c>)
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	2b09      	cmp	r3, #9
 8000b3e:	d1f8      	bne.n	8000b32 <Set_Motor_Position+0x82>
	}
	return 0;
 8000b40:	2300      	movs	r3, #0
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	3710      	adds	r7, #16
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	2000007d 	.word	0x2000007d
 8000b50:	08002acc 	.word	0x08002acc
 8000b54:	20000010 	.word	0x20000010

08000b58 <stop_motor_with_brake>:

int8_t stop_motor_with_brake(uint8_t nodeID){
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	4603      	mov	r3, r0
 8000b60:	71fb      	strb	r3, [r7, #7]
	if (motors_state != STOP_STATE){
 8000b62:	4b0e      	ldr	r3, [pc, #56]	@ (8000b9c <stop_motor_with_brake+0x44>)
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	2b07      	cmp	r3, #7
 8000b68:	d002      	beq.n	8000b70 <stop_motor_with_brake+0x18>
		//HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
		return -1;
 8000b6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b6e:	e010      	b.n	8000b92 <stop_motor_with_brake+0x3a>
	}
	send_can_message(8, MOTOR_COMMAND_CAN_ID + nodeID, STOP_WITH_BRAKE_MESSAGE);
 8000b70:	79fb      	ldrb	r3, [r7, #7]
 8000b72:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 8000b76:	4a0a      	ldr	r2, [pc, #40]	@ (8000ba0 <stop_motor_with_brake+0x48>)
 8000b78:	4619      	mov	r1, r3
 8000b7a:	2008      	movs	r0, #8
 8000b7c:	f000 f838 	bl	8000bf0 <send_can_message>
	while (motors_state != INITIALIZED){
 8000b80:	e002      	b.n	8000b88 <stop_motor_with_brake+0x30>
		HAL_Delay(1);
 8000b82:	2001      	movs	r0, #1
 8000b84:	f000 f9a4 	bl	8000ed0 <HAL_Delay>
	while (motors_state != INITIALIZED){
 8000b88:	4b04      	ldr	r3, [pc, #16]	@ (8000b9c <stop_motor_with_brake+0x44>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	2b09      	cmp	r3, #9
 8000b8e:	d1f8      	bne.n	8000b82 <stop_motor_with_brake+0x2a>
	}
	return 0;
 8000b90:	2300      	movs	r3, #0
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	3708      	adds	r7, #8
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	2000007d 	.word	0x2000007d
 8000ba0:	20000020 	.word	0x20000020

08000ba4 <stop_motor_without_brake>:

int8_t stop_motor_without_brake(uint8_t nodeID){
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	4603      	mov	r3, r0
 8000bac:	71fb      	strb	r3, [r7, #7]
	if (motors_state != PAUSE_STATE){
 8000bae:	4b0e      	ldr	r3, [pc, #56]	@ (8000be8 <stop_motor_without_brake+0x44>)
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	2b08      	cmp	r3, #8
 8000bb4:	d002      	beq.n	8000bbc <stop_motor_without_brake+0x18>
		//HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
		return -1;
 8000bb6:	f04f 33ff 	mov.w	r3, #4294967295
 8000bba:	e010      	b.n	8000bde <stop_motor_without_brake+0x3a>
	}
	send_can_message(8, MOTOR_COMMAND_CAN_ID + nodeID, STOP_WITHOUT_BRAKE_MESSAGE);
 8000bbc:	79fb      	ldrb	r3, [r7, #7]
 8000bbe:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 8000bc2:	4a0a      	ldr	r2, [pc, #40]	@ (8000bec <stop_motor_without_brake+0x48>)
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	2008      	movs	r0, #8
 8000bc8:	f000 f812 	bl	8000bf0 <send_can_message>
	while (motors_state != INITIALIZED){
 8000bcc:	e002      	b.n	8000bd4 <stop_motor_without_brake+0x30>
		HAL_Delay(1);
 8000bce:	2001      	movs	r0, #1
 8000bd0:	f000 f97e 	bl	8000ed0 <HAL_Delay>
	while (motors_state != INITIALIZED){
 8000bd4:	4b04      	ldr	r3, [pc, #16]	@ (8000be8 <stop_motor_without_brake+0x44>)
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	2b09      	cmp	r3, #9
 8000bda:	d1f8      	bne.n	8000bce <stop_motor_without_brake+0x2a>
	}
	return 0;
 8000bdc:	2300      	movs	r3, #0
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	3708      	adds	r7, #8
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	2000007d 	.word	0x2000007d
 8000bec:	20000018 	.word	0x20000018

08000bf0 <send_can_message>:


void send_can_message(uint32_t dlc, uint32_t stdId, uint8_t* data)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b08c      	sub	sp, #48	@ 0x30
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	60f8      	str	r0, [r7, #12]
 8000bf8:	60b9      	str	r1, [r7, #8]
 8000bfa:	607a      	str	r2, [r7, #4]
	 CAN_TxHeaderTypeDef TxHeader1;
	 TxHeader1.IDE = CAN_ID_STD;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	623b      	str	r3, [r7, #32]
	 TxHeader1.RTR = CAN_RTR_DATA;
 8000c00:	2300      	movs	r3, #0
 8000c02:	627b      	str	r3, [r7, #36]	@ 0x24
	 TxHeader1.DLC = dlc;
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	62bb      	str	r3, [r7, #40]	@ 0x28
	 TxHeader1.StdId = stdId;
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	61bb      	str	r3, [r7, #24]
	 uint32_t TxMailbox1;
	 HAL_CAN_AddTxMessage(&hcan1, &TxHeader1, data, &TxMailbox1);
 8000c0c:	f107 0314 	add.w	r3, r7, #20
 8000c10:	f107 0118 	add.w	r1, r7, #24
 8000c14:	687a      	ldr	r2, [r7, #4]
 8000c16:	4803      	ldr	r0, [pc, #12]	@ (8000c24 <send_can_message+0x34>)
 8000c18:	f000 fb9e 	bl	8001358 <HAL_CAN_AddTxMessage>
}
 8000c1c:	bf00      	nop
 8000c1e:	3730      	adds	r7, #48	@ 0x30
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	20000054 	.word	0x20000054

08000c28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c2c:	b672      	cpsid	i
}
 8000c2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c30:	bf00      	nop
 8000c32:	e7fd      	b.n	8000c30 <Error_Handler+0x8>

08000c34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b083      	sub	sp, #12
 8000c38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	607b      	str	r3, [r7, #4]
 8000c3e:	4b10      	ldr	r3, [pc, #64]	@ (8000c80 <HAL_MspInit+0x4c>)
 8000c40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c42:	4a0f      	ldr	r2, [pc, #60]	@ (8000c80 <HAL_MspInit+0x4c>)
 8000c44:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c48:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c4a:	4b0d      	ldr	r3, [pc, #52]	@ (8000c80 <HAL_MspInit+0x4c>)
 8000c4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c4e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c52:	607b      	str	r3, [r7, #4]
 8000c54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c56:	2300      	movs	r3, #0
 8000c58:	603b      	str	r3, [r7, #0]
 8000c5a:	4b09      	ldr	r3, [pc, #36]	@ (8000c80 <HAL_MspInit+0x4c>)
 8000c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c5e:	4a08      	ldr	r2, [pc, #32]	@ (8000c80 <HAL_MspInit+0x4c>)
 8000c60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c64:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c66:	4b06      	ldr	r3, [pc, #24]	@ (8000c80 <HAL_MspInit+0x4c>)
 8000c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c6e:	603b      	str	r3, [r7, #0]
 8000c70:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c72:	bf00      	nop
 8000c74:	370c      	adds	r7, #12
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	40023800 	.word	0x40023800

08000c84 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b08a      	sub	sp, #40	@ 0x28
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c8c:	f107 0314 	add.w	r3, r7, #20
 8000c90:	2200      	movs	r2, #0
 8000c92:	601a      	str	r2, [r3, #0]
 8000c94:	605a      	str	r2, [r3, #4]
 8000c96:	609a      	str	r2, [r3, #8]
 8000c98:	60da      	str	r2, [r3, #12]
 8000c9a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a19      	ldr	r2, [pc, #100]	@ (8000d08 <HAL_CAN_MspInit+0x84>)
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d12c      	bne.n	8000d00 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	613b      	str	r3, [r7, #16]
 8000caa:	4b18      	ldr	r3, [pc, #96]	@ (8000d0c <HAL_CAN_MspInit+0x88>)
 8000cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cae:	4a17      	ldr	r2, [pc, #92]	@ (8000d0c <HAL_CAN_MspInit+0x88>)
 8000cb0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000cb4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cb6:	4b15      	ldr	r3, [pc, #84]	@ (8000d0c <HAL_CAN_MspInit+0x88>)
 8000cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000cbe:	613b      	str	r3, [r7, #16]
 8000cc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	60fb      	str	r3, [r7, #12]
 8000cc6:	4b11      	ldr	r3, [pc, #68]	@ (8000d0c <HAL_CAN_MspInit+0x88>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cca:	4a10      	ldr	r2, [pc, #64]	@ (8000d0c <HAL_CAN_MspInit+0x88>)
 8000ccc:	f043 0302 	orr.w	r3, r3, #2
 8000cd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cd2:	4b0e      	ldr	r3, [pc, #56]	@ (8000d0c <HAL_CAN_MspInit+0x88>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cd6:	f003 0302 	and.w	r3, r3, #2
 8000cda:	60fb      	str	r3, [r7, #12]
 8000cdc:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000cde:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000ce2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cec:	2303      	movs	r3, #3
 8000cee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000cf0:	2309      	movs	r3, #9
 8000cf2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cf4:	f107 0314 	add.w	r3, r7, #20
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	4805      	ldr	r0, [pc, #20]	@ (8000d10 <HAL_CAN_MspInit+0x8c>)
 8000cfc:	f001 f890 	bl	8001e20 <HAL_GPIO_Init>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8000d00:	bf00      	nop
 8000d02:	3728      	adds	r7, #40	@ 0x28
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	40006400 	.word	0x40006400
 8000d0c:	40023800 	.word	0x40023800
 8000d10:	40020400 	.word	0x40020400

08000d14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d18:	bf00      	nop
 8000d1a:	e7fd      	b.n	8000d18 <NMI_Handler+0x4>

08000d1c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d20:	bf00      	nop
 8000d22:	e7fd      	b.n	8000d20 <HardFault_Handler+0x4>

08000d24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d28:	bf00      	nop
 8000d2a:	e7fd      	b.n	8000d28 <MemManage_Handler+0x4>

08000d2c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d30:	bf00      	nop
 8000d32:	e7fd      	b.n	8000d30 <BusFault_Handler+0x4>

08000d34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d38:	bf00      	nop
 8000d3a:	e7fd      	b.n	8000d38 <UsageFault_Handler+0x4>

08000d3c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d40:	bf00      	nop
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr

08000d4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d4a:	b480      	push	{r7}
 8000d4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d4e:	bf00      	nop
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr

08000d58 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d5c:	bf00      	nop
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr

08000d66 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d66:	b580      	push	{r7, lr}
 8000d68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d6a:	f000 f891 	bl	8000e90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d6e:	bf00      	nop
 8000d70:	bd80      	pop	{r7, pc}
	...

08000d74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d78:	4b06      	ldr	r3, [pc, #24]	@ (8000d94 <SystemInit+0x20>)
 8000d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d7e:	4a05      	ldr	r2, [pc, #20]	@ (8000d94 <SystemInit+0x20>)
 8000d80:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d84:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d88:	bf00      	nop
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	e000ed00 	.word	0xe000ed00

08000d98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d98:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000dd0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000d9c:	f7ff ffea 	bl	8000d74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000da0:	480c      	ldr	r0, [pc, #48]	@ (8000dd4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000da2:	490d      	ldr	r1, [pc, #52]	@ (8000dd8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000da4:	4a0d      	ldr	r2, [pc, #52]	@ (8000ddc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000da6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000da8:	e002      	b.n	8000db0 <LoopCopyDataInit>

08000daa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000daa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dae:	3304      	adds	r3, #4

08000db0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000db0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000db2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000db4:	d3f9      	bcc.n	8000daa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000db6:	4a0a      	ldr	r2, [pc, #40]	@ (8000de0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000db8:	4c0a      	ldr	r4, [pc, #40]	@ (8000de4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000dba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dbc:	e001      	b.n	8000dc2 <LoopFillZerobss>

08000dbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dc0:	3204      	adds	r2, #4

08000dc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dc4:	d3fb      	bcc.n	8000dbe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dc6:	f001 fe4d 	bl	8002a64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dca:	f7ff fb75 	bl	80004b8 <main>
  bx  lr    
 8000dce:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000dd0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000dd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dd8:	20000038 	.word	0x20000038
  ldr r2, =_sidata
 8000ddc:	08002af4 	.word	0x08002af4
  ldr r2, =_sbss
 8000de0:	20000038 	.word	0x20000038
  ldr r4, =_ebss
 8000de4:	200000b8 	.word	0x200000b8

08000de8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000de8:	e7fe      	b.n	8000de8 <ADC_IRQHandler>
	...

08000dec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000df0:	4b0e      	ldr	r3, [pc, #56]	@ (8000e2c <HAL_Init+0x40>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a0d      	ldr	r2, [pc, #52]	@ (8000e2c <HAL_Init+0x40>)
 8000df6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000dfa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dfc:	4b0b      	ldr	r3, [pc, #44]	@ (8000e2c <HAL_Init+0x40>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a0a      	ldr	r2, [pc, #40]	@ (8000e2c <HAL_Init+0x40>)
 8000e02:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e08:	4b08      	ldr	r3, [pc, #32]	@ (8000e2c <HAL_Init+0x40>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a07      	ldr	r2, [pc, #28]	@ (8000e2c <HAL_Init+0x40>)
 8000e0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e14:	2003      	movs	r0, #3
 8000e16:	f000 ffc1 	bl	8001d9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e1a:	200f      	movs	r0, #15
 8000e1c:	f000 f808 	bl	8000e30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e20:	f7ff ff08 	bl	8000c34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e24:	2300      	movs	r3, #0
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	40023c00 	.word	0x40023c00

08000e30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e38:	4b12      	ldr	r3, [pc, #72]	@ (8000e84 <HAL_InitTick+0x54>)
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	4b12      	ldr	r3, [pc, #72]	@ (8000e88 <HAL_InitTick+0x58>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	4619      	mov	r1, r3
 8000e42:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e46:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f000 ffd9 	bl	8001e06 <HAL_SYSTICK_Config>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	e00e      	b.n	8000e7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	2b0f      	cmp	r3, #15
 8000e62:	d80a      	bhi.n	8000e7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e64:	2200      	movs	r2, #0
 8000e66:	6879      	ldr	r1, [r7, #4]
 8000e68:	f04f 30ff 	mov.w	r0, #4294967295
 8000e6c:	f000 ffa1 	bl	8001db2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e70:	4a06      	ldr	r2, [pc, #24]	@ (8000e8c <HAL_InitTick+0x5c>)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e76:	2300      	movs	r3, #0
 8000e78:	e000      	b.n	8000e7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e7a:	2301      	movs	r3, #1
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	3708      	adds	r7, #8
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	2000002c 	.word	0x2000002c
 8000e88:	20000034 	.word	0x20000034
 8000e8c:	20000030 	.word	0x20000030

08000e90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e94:	4b06      	ldr	r3, [pc, #24]	@ (8000eb0 <HAL_IncTick+0x20>)
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	461a      	mov	r2, r3
 8000e9a:	4b06      	ldr	r3, [pc, #24]	@ (8000eb4 <HAL_IncTick+0x24>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4413      	add	r3, r2
 8000ea0:	4a04      	ldr	r2, [pc, #16]	@ (8000eb4 <HAL_IncTick+0x24>)
 8000ea2:	6013      	str	r3, [r2, #0]
}
 8000ea4:	bf00      	nop
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	20000034 	.word	0x20000034
 8000eb4:	200000b4 	.word	0x200000b4

08000eb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  return uwTick;
 8000ebc:	4b03      	ldr	r3, [pc, #12]	@ (8000ecc <HAL_GetTick+0x14>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	200000b4 	.word	0x200000b4

08000ed0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ed8:	f7ff ffee 	bl	8000eb8 <HAL_GetTick>
 8000edc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ee8:	d005      	beq.n	8000ef6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000eea:	4b0a      	ldr	r3, [pc, #40]	@ (8000f14 <HAL_Delay+0x44>)
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	461a      	mov	r2, r3
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	4413      	add	r3, r2
 8000ef4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ef6:	bf00      	nop
 8000ef8:	f7ff ffde 	bl	8000eb8 <HAL_GetTick>
 8000efc:	4602      	mov	r2, r0
 8000efe:	68bb      	ldr	r3, [r7, #8]
 8000f00:	1ad3      	subs	r3, r2, r3
 8000f02:	68fa      	ldr	r2, [r7, #12]
 8000f04:	429a      	cmp	r2, r3
 8000f06:	d8f7      	bhi.n	8000ef8 <HAL_Delay+0x28>
  {
  }
}
 8000f08:	bf00      	nop
 8000f0a:	bf00      	nop
 8000f0c:	3710      	adds	r7, #16
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	20000034 	.word	0x20000034

08000f18 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b084      	sub	sp, #16
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d101      	bne.n	8000f2a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000f26:	2301      	movs	r3, #1
 8000f28:	e0ed      	b.n	8001106 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f30:	b2db      	uxtb	r3, r3
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d102      	bne.n	8000f3c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000f36:	6878      	ldr	r0, [r7, #4]
 8000f38:	f7ff fea4 	bl	8000c84 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f042 0201 	orr.w	r2, r2, #1
 8000f4a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f4c:	f7ff ffb4 	bl	8000eb8 <HAL_GetTick>
 8000f50:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000f52:	e012      	b.n	8000f7a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000f54:	f7ff ffb0 	bl	8000eb8 <HAL_GetTick>
 8000f58:	4602      	mov	r2, r0
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	1ad3      	subs	r3, r2, r3
 8000f5e:	2b0a      	cmp	r3, #10
 8000f60:	d90b      	bls.n	8000f7a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f66:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2205      	movs	r2, #5
 8000f72:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000f76:	2301      	movs	r3, #1
 8000f78:	e0c5      	b.n	8001106 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	f003 0301 	and.w	r3, r3, #1
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d0e5      	beq.n	8000f54 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f022 0202 	bic.w	r2, r2, #2
 8000f96:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f98:	f7ff ff8e 	bl	8000eb8 <HAL_GetTick>
 8000f9c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000f9e:	e012      	b.n	8000fc6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000fa0:	f7ff ff8a 	bl	8000eb8 <HAL_GetTick>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	1ad3      	subs	r3, r2, r3
 8000faa:	2b0a      	cmp	r3, #10
 8000fac:	d90b      	bls.n	8000fc6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fb2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	2205      	movs	r2, #5
 8000fbe:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	e09f      	b.n	8001106 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	f003 0302 	and.w	r3, r3, #2
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d1e5      	bne.n	8000fa0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	7e1b      	ldrb	r3, [r3, #24]
 8000fd8:	2b01      	cmp	r3, #1
 8000fda:	d108      	bne.n	8000fee <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000fea:	601a      	str	r2, [r3, #0]
 8000fec:	e007      	b.n	8000ffe <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000ffc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	7e5b      	ldrb	r3, [r3, #25]
 8001002:	2b01      	cmp	r3, #1
 8001004:	d108      	bne.n	8001018 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	681a      	ldr	r2, [r3, #0]
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001014:	601a      	str	r2, [r3, #0]
 8001016:	e007      	b.n	8001028 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	681a      	ldr	r2, [r3, #0]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001026:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	7e9b      	ldrb	r3, [r3, #26]
 800102c:	2b01      	cmp	r3, #1
 800102e:	d108      	bne.n	8001042 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	681a      	ldr	r2, [r3, #0]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f042 0220 	orr.w	r2, r2, #32
 800103e:	601a      	str	r2, [r3, #0]
 8001040:	e007      	b.n	8001052 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f022 0220 	bic.w	r2, r2, #32
 8001050:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	7edb      	ldrb	r3, [r3, #27]
 8001056:	2b01      	cmp	r3, #1
 8001058:	d108      	bne.n	800106c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	681a      	ldr	r2, [r3, #0]
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f022 0210 	bic.w	r2, r2, #16
 8001068:	601a      	str	r2, [r3, #0]
 800106a:	e007      	b.n	800107c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f042 0210 	orr.w	r2, r2, #16
 800107a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	7f1b      	ldrb	r3, [r3, #28]
 8001080:	2b01      	cmp	r3, #1
 8001082:	d108      	bne.n	8001096 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f042 0208 	orr.w	r2, r2, #8
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	e007      	b.n	80010a6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f022 0208 	bic.w	r2, r2, #8
 80010a4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	7f5b      	ldrb	r3, [r3, #29]
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d108      	bne.n	80010c0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f042 0204 	orr.w	r2, r2, #4
 80010bc:	601a      	str	r2, [r3, #0]
 80010be:	e007      	b.n	80010d0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f022 0204 	bic.w	r2, r2, #4
 80010ce:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	689a      	ldr	r2, [r3, #8]
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	68db      	ldr	r3, [r3, #12]
 80010d8:	431a      	orrs	r2, r3
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	691b      	ldr	r3, [r3, #16]
 80010de:	431a      	orrs	r2, r3
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	695b      	ldr	r3, [r3, #20]
 80010e4:	ea42 0103 	orr.w	r1, r2, r3
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	1e5a      	subs	r2, r3, #1
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	430a      	orrs	r2, r1
 80010f4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2200      	movs	r2, #0
 80010fa:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2201      	movs	r2, #1
 8001100:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001104:	2300      	movs	r3, #0
}
 8001106:	4618      	mov	r0, r3
 8001108:	3710      	adds	r7, #16
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
	...

08001110 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001110:	b480      	push	{r7}
 8001112:	b087      	sub	sp, #28
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001126:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001128:	7cfb      	ldrb	r3, [r7, #19]
 800112a:	2b01      	cmp	r3, #1
 800112c:	d003      	beq.n	8001136 <HAL_CAN_ConfigFilter+0x26>
 800112e:	7cfb      	ldrb	r3, [r7, #19]
 8001130:	2b02      	cmp	r3, #2
 8001132:	f040 80be 	bne.w	80012b2 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001136:	4b65      	ldr	r3, [pc, #404]	@ (80012cc <HAL_CAN_ConfigFilter+0x1bc>)
 8001138:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001140:	f043 0201 	orr.w	r2, r3, #1
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001150:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001164:	021b      	lsls	r3, r3, #8
 8001166:	431a      	orrs	r2, r3
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	695b      	ldr	r3, [r3, #20]
 8001172:	f003 031f 	and.w	r3, r3, #31
 8001176:	2201      	movs	r2, #1
 8001178:	fa02 f303 	lsl.w	r3, r2, r3
 800117c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	43db      	mvns	r3, r3
 8001188:	401a      	ands	r2, r3
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	69db      	ldr	r3, [r3, #28]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d123      	bne.n	80011e0 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	43db      	mvns	r3, r3
 80011a2:	401a      	ands	r2, r3
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	68db      	ldr	r3, [r3, #12]
 80011ae:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80011b6:	683a      	ldr	r2, [r7, #0]
 80011b8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80011ba:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	3248      	adds	r2, #72	@ 0x48
 80011c0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	689b      	ldr	r3, [r3, #8]
 80011c8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80011d4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80011d6:	6979      	ldr	r1, [r7, #20]
 80011d8:	3348      	adds	r3, #72	@ 0x48
 80011da:	00db      	lsls	r3, r3, #3
 80011dc:	440b      	add	r3, r1
 80011de:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	69db      	ldr	r3, [r3, #28]
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	d122      	bne.n	800122e <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	431a      	orrs	r2, r3
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001204:	683a      	ldr	r2, [r7, #0]
 8001206:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001208:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	3248      	adds	r2, #72	@ 0x48
 800120e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	689b      	ldr	r3, [r3, #8]
 8001216:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001222:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001224:	6979      	ldr	r1, [r7, #20]
 8001226:	3348      	adds	r3, #72	@ 0x48
 8001228:	00db      	lsls	r3, r3, #3
 800122a:	440b      	add	r3, r1
 800122c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	699b      	ldr	r3, [r3, #24]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d109      	bne.n	800124a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	43db      	mvns	r3, r3
 8001240:	401a      	ands	r2, r3
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001248:	e007      	b.n	800125a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	431a      	orrs	r2, r3
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	691b      	ldr	r3, [r3, #16]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d109      	bne.n	8001276 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	43db      	mvns	r3, r3
 800126c:	401a      	ands	r2, r3
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001274:	e007      	b.n	8001286 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	431a      	orrs	r2, r3
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	6a1b      	ldr	r3, [r3, #32]
 800128a:	2b01      	cmp	r3, #1
 800128c:	d107      	bne.n	800129e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	431a      	orrs	r2, r3
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80012a4:	f023 0201 	bic.w	r2, r3, #1
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80012ae:	2300      	movs	r3, #0
 80012b0:	e006      	b.n	80012c0 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012b6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80012be:	2301      	movs	r3, #1
  }
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	371c      	adds	r7, #28
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr
 80012cc:	40006400 	.word	0x40006400

080012d0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b084      	sub	sp, #16
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d12e      	bne.n	8001342 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2202      	movs	r2, #2
 80012e8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f022 0201 	bic.w	r2, r2, #1
 80012fa:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80012fc:	f7ff fddc 	bl	8000eb8 <HAL_GetTick>
 8001300:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001302:	e012      	b.n	800132a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001304:	f7ff fdd8 	bl	8000eb8 <HAL_GetTick>
 8001308:	4602      	mov	r2, r0
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	2b0a      	cmp	r3, #10
 8001310:	d90b      	bls.n	800132a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001316:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2205      	movs	r2, #5
 8001322:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	e012      	b.n	8001350 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f003 0301 	and.w	r3, r3, #1
 8001334:	2b00      	cmp	r3, #0
 8001336:	d1e5      	bne.n	8001304 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2200      	movs	r2, #0
 800133c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 800133e:	2300      	movs	r3, #0
 8001340:	e006      	b.n	8001350 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001346:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
  }
}
 8001350:	4618      	mov	r0, r3
 8001352:	3710      	adds	r7, #16
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}

08001358 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001358:	b480      	push	{r7}
 800135a:	b089      	sub	sp, #36	@ 0x24
 800135c:	af00      	add	r7, sp, #0
 800135e:	60f8      	str	r0, [r7, #12]
 8001360:	60b9      	str	r1, [r7, #8]
 8001362:	607a      	str	r2, [r7, #4]
 8001364:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	f893 3020 	ldrb.w	r3, [r3, #32]
 800136c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	689b      	ldr	r3, [r3, #8]
 8001374:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001376:	7ffb      	ldrb	r3, [r7, #31]
 8001378:	2b01      	cmp	r3, #1
 800137a:	d003      	beq.n	8001384 <HAL_CAN_AddTxMessage+0x2c>
 800137c:	7ffb      	ldrb	r3, [r7, #31]
 800137e:	2b02      	cmp	r3, #2
 8001380:	f040 80ad 	bne.w	80014de <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001384:	69bb      	ldr	r3, [r7, #24]
 8001386:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800138a:	2b00      	cmp	r3, #0
 800138c:	d10a      	bne.n	80013a4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800138e:	69bb      	ldr	r3, [r7, #24]
 8001390:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001394:	2b00      	cmp	r3, #0
 8001396:	d105      	bne.n	80013a4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001398:	69bb      	ldr	r3, [r7, #24]
 800139a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800139e:	2b00      	cmp	r3, #0
 80013a0:	f000 8095 	beq.w	80014ce <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80013a4:	69bb      	ldr	r3, [r7, #24]
 80013a6:	0e1b      	lsrs	r3, r3, #24
 80013a8:	f003 0303 	and.w	r3, r3, #3
 80013ac:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80013ae:	2201      	movs	r2, #1
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	409a      	lsls	r2, r3
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	689b      	ldr	r3, [r3, #8]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d10d      	bne.n	80013dc <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80013c6:	68bb      	ldr	r3, [r7, #8]
 80013c8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80013ca:	68f9      	ldr	r1, [r7, #12]
 80013cc:	6809      	ldr	r1, [r1, #0]
 80013ce:	431a      	orrs	r2, r3
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	3318      	adds	r3, #24
 80013d4:	011b      	lsls	r3, r3, #4
 80013d6:	440b      	add	r3, r1
 80013d8:	601a      	str	r2, [r3, #0]
 80013da:	e00f      	b.n	80013fc <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80013dc:	68bb      	ldr	r3, [r7, #8]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80013e2:	68bb      	ldr	r3, [r7, #8]
 80013e4:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80013e6:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80013ec:	68f9      	ldr	r1, [r7, #12]
 80013ee:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80013f0:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	3318      	adds	r3, #24
 80013f6:	011b      	lsls	r3, r3, #4
 80013f8:	440b      	add	r3, r1
 80013fa:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	6819      	ldr	r1, [r3, #0]
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	691a      	ldr	r2, [r3, #16]
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	3318      	adds	r3, #24
 8001408:	011b      	lsls	r3, r3, #4
 800140a:	440b      	add	r3, r1
 800140c:	3304      	adds	r3, #4
 800140e:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	7d1b      	ldrb	r3, [r3, #20]
 8001414:	2b01      	cmp	r3, #1
 8001416:	d111      	bne.n	800143c <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	3318      	adds	r3, #24
 8001420:	011b      	lsls	r3, r3, #4
 8001422:	4413      	add	r3, r2
 8001424:	3304      	adds	r3, #4
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	68fa      	ldr	r2, [r7, #12]
 800142a:	6811      	ldr	r1, [r2, #0]
 800142c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	3318      	adds	r3, #24
 8001434:	011b      	lsls	r3, r3, #4
 8001436:	440b      	add	r3, r1
 8001438:	3304      	adds	r3, #4
 800143a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	3307      	adds	r3, #7
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	061a      	lsls	r2, r3, #24
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	3306      	adds	r3, #6
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	041b      	lsls	r3, r3, #16
 800144c:	431a      	orrs	r2, r3
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	3305      	adds	r3, #5
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	021b      	lsls	r3, r3, #8
 8001456:	4313      	orrs	r3, r2
 8001458:	687a      	ldr	r2, [r7, #4]
 800145a:	3204      	adds	r2, #4
 800145c:	7812      	ldrb	r2, [r2, #0]
 800145e:	4610      	mov	r0, r2
 8001460:	68fa      	ldr	r2, [r7, #12]
 8001462:	6811      	ldr	r1, [r2, #0]
 8001464:	ea43 0200 	orr.w	r2, r3, r0
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	011b      	lsls	r3, r3, #4
 800146c:	440b      	add	r3, r1
 800146e:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8001472:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	3303      	adds	r3, #3
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	061a      	lsls	r2, r3, #24
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	3302      	adds	r3, #2
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	041b      	lsls	r3, r3, #16
 8001484:	431a      	orrs	r2, r3
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	3301      	adds	r3, #1
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	021b      	lsls	r3, r3, #8
 800148e:	4313      	orrs	r3, r2
 8001490:	687a      	ldr	r2, [r7, #4]
 8001492:	7812      	ldrb	r2, [r2, #0]
 8001494:	4610      	mov	r0, r2
 8001496:	68fa      	ldr	r2, [r7, #12]
 8001498:	6811      	ldr	r1, [r2, #0]
 800149a:	ea43 0200 	orr.w	r2, r3, r0
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	011b      	lsls	r3, r3, #4
 80014a2:	440b      	add	r3, r1
 80014a4:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80014a8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	3318      	adds	r3, #24
 80014b2:	011b      	lsls	r3, r3, #4
 80014b4:	4413      	add	r3, r2
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	68fa      	ldr	r2, [r7, #12]
 80014ba:	6811      	ldr	r1, [r2, #0]
 80014bc:	f043 0201 	orr.w	r2, r3, #1
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	3318      	adds	r3, #24
 80014c4:	011b      	lsls	r3, r3, #4
 80014c6:	440b      	add	r3, r1
 80014c8:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80014ca:	2300      	movs	r3, #0
 80014cc:	e00e      	b.n	80014ec <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014d2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80014da:	2301      	movs	r3, #1
 80014dc:	e006      	b.n	80014ec <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014e2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
  }
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	3724      	adds	r7, #36	@ 0x24
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr

080014f8 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80014f8:	b480      	push	{r7}
 80014fa:	b087      	sub	sp, #28
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	60f8      	str	r0, [r7, #12]
 8001500:	60b9      	str	r1, [r7, #8]
 8001502:	607a      	str	r2, [r7, #4]
 8001504:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	f893 3020 	ldrb.w	r3, [r3, #32]
 800150c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800150e:	7dfb      	ldrb	r3, [r7, #23]
 8001510:	2b01      	cmp	r3, #1
 8001512:	d003      	beq.n	800151c <HAL_CAN_GetRxMessage+0x24>
 8001514:	7dfb      	ldrb	r3, [r7, #23]
 8001516:	2b02      	cmp	r3, #2
 8001518:	f040 8103 	bne.w	8001722 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d10e      	bne.n	8001540 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	f003 0303 	and.w	r3, r3, #3
 800152c:	2b00      	cmp	r3, #0
 800152e:	d116      	bne.n	800155e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001534:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800153c:	2301      	movs	r3, #1
 800153e:	e0f7      	b.n	8001730 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	691b      	ldr	r3, [r3, #16]
 8001546:	f003 0303 	and.w	r3, r3, #3
 800154a:	2b00      	cmp	r3, #0
 800154c:	d107      	bne.n	800155e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001552:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	e0e8      	b.n	8001730 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	68bb      	ldr	r3, [r7, #8]
 8001564:	331b      	adds	r3, #27
 8001566:	011b      	lsls	r3, r3, #4
 8001568:	4413      	add	r3, r2
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f003 0204 	and.w	r2, r3, #4
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d10c      	bne.n	8001596 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	331b      	adds	r3, #27
 8001584:	011b      	lsls	r3, r3, #4
 8001586:	4413      	add	r3, r2
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	0d5b      	lsrs	r3, r3, #21
 800158c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	601a      	str	r2, [r3, #0]
 8001594:	e00b      	b.n	80015ae <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	68bb      	ldr	r3, [r7, #8]
 800159c:	331b      	adds	r3, #27
 800159e:	011b      	lsls	r3, r3, #4
 80015a0:	4413      	add	r3, r2
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	08db      	lsrs	r3, r3, #3
 80015a6:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	68bb      	ldr	r3, [r7, #8]
 80015b4:	331b      	adds	r3, #27
 80015b6:	011b      	lsls	r3, r3, #4
 80015b8:	4413      	add	r3, r2
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f003 0202 	and.w	r2, r3, #2
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	331b      	adds	r3, #27
 80015cc:	011b      	lsls	r3, r3, #4
 80015ce:	4413      	add	r3, r2
 80015d0:	3304      	adds	r3, #4
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f003 0308 	and.w	r3, r3, #8
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d003      	beq.n	80015e4 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2208      	movs	r2, #8
 80015e0:	611a      	str	r2, [r3, #16]
 80015e2:	e00b      	b.n	80015fc <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	331b      	adds	r3, #27
 80015ec:	011b      	lsls	r3, r3, #4
 80015ee:	4413      	add	r3, r2
 80015f0:	3304      	adds	r3, #4
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f003 020f 	and.w	r2, r3, #15
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	331b      	adds	r3, #27
 8001604:	011b      	lsls	r3, r3, #4
 8001606:	4413      	add	r3, r2
 8001608:	3304      	adds	r3, #4
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	0a1b      	lsrs	r3, r3, #8
 800160e:	b2da      	uxtb	r2, r3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	331b      	adds	r3, #27
 800161c:	011b      	lsls	r3, r3, #4
 800161e:	4413      	add	r3, r2
 8001620:	3304      	adds	r3, #4
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	0c1b      	lsrs	r3, r3, #16
 8001626:	b29a      	uxth	r2, r3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	011b      	lsls	r3, r3, #4
 8001634:	4413      	add	r3, r2
 8001636:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	b2da      	uxtb	r2, r3
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	68bb      	ldr	r3, [r7, #8]
 8001648:	011b      	lsls	r3, r3, #4
 800164a:	4413      	add	r3, r2
 800164c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	0a1a      	lsrs	r2, r3, #8
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	3301      	adds	r3, #1
 8001658:	b2d2      	uxtb	r2, r2
 800165a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	011b      	lsls	r3, r3, #4
 8001664:	4413      	add	r3, r2
 8001666:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	0c1a      	lsrs	r2, r3, #16
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	3302      	adds	r3, #2
 8001672:	b2d2      	uxtb	r2, r2
 8001674:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	68bb      	ldr	r3, [r7, #8]
 800167c:	011b      	lsls	r3, r3, #4
 800167e:	4413      	add	r3, r2
 8001680:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	0e1a      	lsrs	r2, r3, #24
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	3303      	adds	r3, #3
 800168c:	b2d2      	uxtb	r2, r2
 800168e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	011b      	lsls	r3, r3, #4
 8001698:	4413      	add	r3, r2
 800169a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	3304      	adds	r3, #4
 80016a4:	b2d2      	uxtb	r2, r2
 80016a6:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	011b      	lsls	r3, r3, #4
 80016b0:	4413      	add	r3, r2
 80016b2:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	0a1a      	lsrs	r2, r3, #8
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	3305      	adds	r3, #5
 80016be:	b2d2      	uxtb	r2, r2
 80016c0:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	68bb      	ldr	r3, [r7, #8]
 80016c8:	011b      	lsls	r3, r3, #4
 80016ca:	4413      	add	r3, r2
 80016cc:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	0c1a      	lsrs	r2, r3, #16
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	3306      	adds	r3, #6
 80016d8:	b2d2      	uxtb	r2, r2
 80016da:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	011b      	lsls	r3, r3, #4
 80016e4:	4413      	add	r3, r2
 80016e6:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	0e1a      	lsrs	r2, r3, #24
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	3307      	adds	r3, #7
 80016f2:	b2d2      	uxtb	r2, r2
 80016f4:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80016f6:	68bb      	ldr	r3, [r7, #8]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d108      	bne.n	800170e <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	68da      	ldr	r2, [r3, #12]
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f042 0220 	orr.w	r2, r2, #32
 800170a:	60da      	str	r2, [r3, #12]
 800170c:	e007      	b.n	800171e <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	691a      	ldr	r2, [r3, #16]
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f042 0220 	orr.w	r2, r2, #32
 800171c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800171e:	2300      	movs	r3, #0
 8001720:	e006      	b.n	8001730 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001726:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
  }
}
 8001730:	4618      	mov	r0, r3
 8001732:	371c      	adds	r7, #28
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800173c:	b480      	push	{r7}
 800173e:	b085      	sub	sp, #20
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
 8001744:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	f893 3020 	ldrb.w	r3, [r3, #32]
 800174c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800174e:	7bfb      	ldrb	r3, [r7, #15]
 8001750:	2b01      	cmp	r3, #1
 8001752:	d002      	beq.n	800175a <HAL_CAN_ActivateNotification+0x1e>
 8001754:	7bfb      	ldrb	r3, [r7, #15]
 8001756:	2b02      	cmp	r3, #2
 8001758:	d109      	bne.n	800176e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	6959      	ldr	r1, [r3, #20]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	683a      	ldr	r2, [r7, #0]
 8001766:	430a      	orrs	r2, r1
 8001768:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800176a:	2300      	movs	r3, #0
 800176c:	e006      	b.n	800177c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001772:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
  }
}
 800177c:	4618      	mov	r0, r3
 800177e:	3714      	adds	r7, #20
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr

08001788 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b08a      	sub	sp, #40	@ 0x28
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001790:	2300      	movs	r3, #0
 8001792:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	695b      	ldr	r3, [r3, #20]
 800179a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	68db      	ldr	r3, [r3, #12]
 80017b2:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	691b      	ldr	r3, [r3, #16]
 80017ba:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	699b      	ldr	r3, [r3, #24]
 80017c2:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80017c4:	6a3b      	ldr	r3, [r7, #32]
 80017c6:	f003 0301 	and.w	r3, r3, #1
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d07c      	beq.n	80018c8 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80017ce:	69bb      	ldr	r3, [r7, #24]
 80017d0:	f003 0301 	and.w	r3, r3, #1
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d023      	beq.n	8001820 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	2201      	movs	r2, #1
 80017de:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80017e0:	69bb      	ldr	r3, [r7, #24]
 80017e2:	f003 0302 	and.w	r3, r3, #2
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d003      	beq.n	80017f2 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f000 f983 	bl	8001af6 <HAL_CAN_TxMailbox0CompleteCallback>
 80017f0:	e016      	b.n	8001820 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80017f2:	69bb      	ldr	r3, [r7, #24]
 80017f4:	f003 0304 	and.w	r3, r3, #4
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d004      	beq.n	8001806 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80017fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017fe:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001802:	627b      	str	r3, [r7, #36]	@ 0x24
 8001804:	e00c      	b.n	8001820 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001806:	69bb      	ldr	r3, [r7, #24]
 8001808:	f003 0308 	and.w	r3, r3, #8
 800180c:	2b00      	cmp	r3, #0
 800180e:	d004      	beq.n	800181a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001812:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001816:	627b      	str	r3, [r7, #36]	@ 0x24
 8001818:	e002      	b.n	8001820 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800181a:	6878      	ldr	r0, [r7, #4]
 800181c:	f000 f989 	bl	8001b32 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001820:	69bb      	ldr	r3, [r7, #24]
 8001822:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001826:	2b00      	cmp	r3, #0
 8001828:	d024      	beq.n	8001874 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001832:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001834:	69bb      	ldr	r3, [r7, #24]
 8001836:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800183a:	2b00      	cmp	r3, #0
 800183c:	d003      	beq.n	8001846 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	f000 f963 	bl	8001b0a <HAL_CAN_TxMailbox1CompleteCallback>
 8001844:	e016      	b.n	8001874 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001846:	69bb      	ldr	r3, [r7, #24]
 8001848:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800184c:	2b00      	cmp	r3, #0
 800184e:	d004      	beq.n	800185a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001852:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001856:	627b      	str	r3, [r7, #36]	@ 0x24
 8001858:	e00c      	b.n	8001874 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800185a:	69bb      	ldr	r3, [r7, #24]
 800185c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001860:	2b00      	cmp	r3, #0
 8001862:	d004      	beq.n	800186e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001866:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800186a:	627b      	str	r3, [r7, #36]	@ 0x24
 800186c:	e002      	b.n	8001874 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f000 f969 	bl	8001b46 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001874:	69bb      	ldr	r3, [r7, #24]
 8001876:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800187a:	2b00      	cmp	r3, #0
 800187c:	d024      	beq.n	80018c8 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001886:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001888:	69bb      	ldr	r3, [r7, #24]
 800188a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d003      	beq.n	800189a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	f000 f943 	bl	8001b1e <HAL_CAN_TxMailbox2CompleteCallback>
 8001898:	e016      	b.n	80018c8 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800189a:	69bb      	ldr	r3, [r7, #24]
 800189c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d004      	beq.n	80018ae <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80018a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80018aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80018ac:	e00c      	b.n	80018c8 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80018ae:	69bb      	ldr	r3, [r7, #24]
 80018b0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d004      	beq.n	80018c2 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80018b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018be:	627b      	str	r3, [r7, #36]	@ 0x24
 80018c0:	e002      	b.n	80018c8 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	f000 f949 	bl	8001b5a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80018c8:	6a3b      	ldr	r3, [r7, #32]
 80018ca:	f003 0308 	and.w	r3, r3, #8
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d00c      	beq.n	80018ec <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	f003 0310 	and.w	r3, r3, #16
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d007      	beq.n	80018ec <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80018dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018de:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80018e2:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	2210      	movs	r2, #16
 80018ea:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80018ec:	6a3b      	ldr	r3, [r7, #32]
 80018ee:	f003 0304 	and.w	r3, r3, #4
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d00b      	beq.n	800190e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	f003 0308 	and.w	r3, r3, #8
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d006      	beq.n	800190e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	2208      	movs	r2, #8
 8001906:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001908:	6878      	ldr	r0, [r7, #4]
 800190a:	f000 f93a 	bl	8001b82 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800190e:	6a3b      	ldr	r3, [r7, #32]
 8001910:	f003 0302 	and.w	r3, r3, #2
 8001914:	2b00      	cmp	r3, #0
 8001916:	d009      	beq.n	800192c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	68db      	ldr	r3, [r3, #12]
 800191e:	f003 0303 	and.w	r3, r3, #3
 8001922:	2b00      	cmp	r3, #0
 8001924:	d002      	beq.n	800192c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001926:	6878      	ldr	r0, [r7, #4]
 8001928:	f000 f921 	bl	8001b6e <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800192c:	6a3b      	ldr	r3, [r7, #32]
 800192e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001932:	2b00      	cmp	r3, #0
 8001934:	d00c      	beq.n	8001950 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	f003 0310 	and.w	r3, r3, #16
 800193c:	2b00      	cmp	r3, #0
 800193e:	d007      	beq.n	8001950 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001942:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001946:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	2210      	movs	r2, #16
 800194e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001950:	6a3b      	ldr	r3, [r7, #32]
 8001952:	f003 0320 	and.w	r3, r3, #32
 8001956:	2b00      	cmp	r3, #0
 8001958:	d00b      	beq.n	8001972 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	f003 0308 	and.w	r3, r3, #8
 8001960:	2b00      	cmp	r3, #0
 8001962:	d006      	beq.n	8001972 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	2208      	movs	r2, #8
 800196a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800196c:	6878      	ldr	r0, [r7, #4]
 800196e:	f000 f91c 	bl	8001baa <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001972:	6a3b      	ldr	r3, [r7, #32]
 8001974:	f003 0310 	and.w	r3, r3, #16
 8001978:	2b00      	cmp	r3, #0
 800197a:	d009      	beq.n	8001990 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	691b      	ldr	r3, [r3, #16]
 8001982:	f003 0303 	and.w	r3, r3, #3
 8001986:	2b00      	cmp	r3, #0
 8001988:	d002      	beq.n	8001990 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	f000 f903 	bl	8001b96 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001990:	6a3b      	ldr	r3, [r7, #32]
 8001992:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001996:	2b00      	cmp	r3, #0
 8001998:	d00b      	beq.n	80019b2 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	f003 0310 	and.w	r3, r3, #16
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d006      	beq.n	80019b2 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	2210      	movs	r2, #16
 80019aa:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80019ac:	6878      	ldr	r0, [r7, #4]
 80019ae:	f000 f906 	bl	8001bbe <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80019b2:	6a3b      	ldr	r3, [r7, #32]
 80019b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d00b      	beq.n	80019d4 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80019bc:	69fb      	ldr	r3, [r7, #28]
 80019be:	f003 0308 	and.w	r3, r3, #8
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d006      	beq.n	80019d4 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	2208      	movs	r2, #8
 80019cc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	f000 f8ff 	bl	8001bd2 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80019d4:	6a3b      	ldr	r3, [r7, #32]
 80019d6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d07b      	beq.n	8001ad6 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	f003 0304 	and.w	r3, r3, #4
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d072      	beq.n	8001ace <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80019e8:	6a3b      	ldr	r3, [r7, #32]
 80019ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d008      	beq.n	8001a04 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d003      	beq.n	8001a04 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80019fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019fe:	f043 0301 	orr.w	r3, r3, #1
 8001a02:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001a04:	6a3b      	ldr	r3, [r7, #32]
 8001a06:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d008      	beq.n	8001a20 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d003      	beq.n	8001a20 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a1a:	f043 0302 	orr.w	r3, r3, #2
 8001a1e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001a20:	6a3b      	ldr	r3, [r7, #32]
 8001a22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d008      	beq.n	8001a3c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d003      	beq.n	8001a3c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a36:	f043 0304 	orr.w	r3, r3, #4
 8001a3a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001a3c:	6a3b      	ldr	r3, [r7, #32]
 8001a3e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d043      	beq.n	8001ace <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d03e      	beq.n	8001ace <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001a56:	2b60      	cmp	r3, #96	@ 0x60
 8001a58:	d02b      	beq.n	8001ab2 <HAL_CAN_IRQHandler+0x32a>
 8001a5a:	2b60      	cmp	r3, #96	@ 0x60
 8001a5c:	d82e      	bhi.n	8001abc <HAL_CAN_IRQHandler+0x334>
 8001a5e:	2b50      	cmp	r3, #80	@ 0x50
 8001a60:	d022      	beq.n	8001aa8 <HAL_CAN_IRQHandler+0x320>
 8001a62:	2b50      	cmp	r3, #80	@ 0x50
 8001a64:	d82a      	bhi.n	8001abc <HAL_CAN_IRQHandler+0x334>
 8001a66:	2b40      	cmp	r3, #64	@ 0x40
 8001a68:	d019      	beq.n	8001a9e <HAL_CAN_IRQHandler+0x316>
 8001a6a:	2b40      	cmp	r3, #64	@ 0x40
 8001a6c:	d826      	bhi.n	8001abc <HAL_CAN_IRQHandler+0x334>
 8001a6e:	2b30      	cmp	r3, #48	@ 0x30
 8001a70:	d010      	beq.n	8001a94 <HAL_CAN_IRQHandler+0x30c>
 8001a72:	2b30      	cmp	r3, #48	@ 0x30
 8001a74:	d822      	bhi.n	8001abc <HAL_CAN_IRQHandler+0x334>
 8001a76:	2b10      	cmp	r3, #16
 8001a78:	d002      	beq.n	8001a80 <HAL_CAN_IRQHandler+0x2f8>
 8001a7a:	2b20      	cmp	r3, #32
 8001a7c:	d005      	beq.n	8001a8a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001a7e:	e01d      	b.n	8001abc <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a82:	f043 0308 	orr.w	r3, r3, #8
 8001a86:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001a88:	e019      	b.n	8001abe <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a8c:	f043 0310 	orr.w	r3, r3, #16
 8001a90:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001a92:	e014      	b.n	8001abe <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a96:	f043 0320 	orr.w	r3, r3, #32
 8001a9a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001a9c:	e00f      	b.n	8001abe <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aa0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001aa4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001aa6:	e00a      	b.n	8001abe <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001aa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aaa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001aae:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001ab0:	e005      	b.n	8001abe <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ab4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ab8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001aba:	e000      	b.n	8001abe <HAL_CAN_IRQHandler+0x336>
            break;
 8001abc:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	699a      	ldr	r2, [r3, #24]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001acc:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	2204      	movs	r2, #4
 8001ad4:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d008      	beq.n	8001aee <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ae2:	431a      	orrs	r2, r3
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001ae8:	6878      	ldr	r0, [r7, #4]
 8001aea:	f000 f87c 	bl	8001be6 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001aee:	bf00      	nop
 8001af0:	3728      	adds	r7, #40	@ 0x28
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}

08001af6 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001af6:	b480      	push	{r7}
 8001af8:	b083      	sub	sp, #12
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001afe:	bf00      	nop
 8001b00:	370c      	adds	r7, #12
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr

08001b0a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001b0a:	b480      	push	{r7}
 8001b0c:	b083      	sub	sp, #12
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001b12:	bf00      	nop
 8001b14:	370c      	adds	r7, #12
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr

08001b1e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001b1e:	b480      	push	{r7}
 8001b20:	b083      	sub	sp, #12
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001b26:	bf00      	nop
 8001b28:	370c      	adds	r7, #12
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr

08001b32 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001b32:	b480      	push	{r7}
 8001b34:	b083      	sub	sp, #12
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001b3a:	bf00      	nop
 8001b3c:	370c      	adds	r7, #12
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr

08001b46 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001b46:	b480      	push	{r7}
 8001b48:	b083      	sub	sp, #12
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001b4e:	bf00      	nop
 8001b50:	370c      	adds	r7, #12
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr

08001b5a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001b5a:	b480      	push	{r7}
 8001b5c:	b083      	sub	sp, #12
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001b62:	bf00      	nop
 8001b64:	370c      	adds	r7, #12
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr

08001b6e <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001b6e:	b480      	push	{r7}
 8001b70:	b083      	sub	sp, #12
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001b76:	bf00      	nop
 8001b78:	370c      	adds	r7, #12
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr

08001b82 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001b82:	b480      	push	{r7}
 8001b84:	b083      	sub	sp, #12
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001b8a:	bf00      	nop
 8001b8c:	370c      	adds	r7, #12
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr

08001b96 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001b96:	b480      	push	{r7}
 8001b98:	b083      	sub	sp, #12
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001b9e:	bf00      	nop
 8001ba0:	370c      	adds	r7, #12
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr

08001baa <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001baa:	b480      	push	{r7}
 8001bac:	b083      	sub	sp, #12
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001bb2:	bf00      	nop
 8001bb4:	370c      	adds	r7, #12
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr

08001bbe <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001bbe:	b480      	push	{r7}
 8001bc0:	b083      	sub	sp, #12
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001bc6:	bf00      	nop
 8001bc8:	370c      	adds	r7, #12
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr

08001bd2 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001bd2:	b480      	push	{r7}
 8001bd4:	b083      	sub	sp, #12
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001bda:	bf00      	nop
 8001bdc:	370c      	adds	r7, #12
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr

08001be6 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001be6:	b480      	push	{r7}
 8001be8:	b083      	sub	sp, #12
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001bee:	bf00      	nop
 8001bf0:	370c      	adds	r7, #12
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr
	...

08001bfc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b085      	sub	sp, #20
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	f003 0307 	and.w	r3, r3, #7
 8001c0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c0c:	4b0c      	ldr	r3, [pc, #48]	@ (8001c40 <__NVIC_SetPriorityGrouping+0x44>)
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c12:	68ba      	ldr	r2, [r7, #8]
 8001c14:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c18:	4013      	ands	r3, r2
 8001c1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c24:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c2e:	4a04      	ldr	r2, [pc, #16]	@ (8001c40 <__NVIC_SetPriorityGrouping+0x44>)
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	60d3      	str	r3, [r2, #12]
}
 8001c34:	bf00      	nop
 8001c36:	3714      	adds	r7, #20
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr
 8001c40:	e000ed00 	.word	0xe000ed00

08001c44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c48:	4b04      	ldr	r3, [pc, #16]	@ (8001c5c <__NVIC_GetPriorityGrouping+0x18>)
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	0a1b      	lsrs	r3, r3, #8
 8001c4e:	f003 0307 	and.w	r3, r3, #7
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr
 8001c5c:	e000ed00 	.word	0xe000ed00

08001c60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	4603      	mov	r3, r0
 8001c68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	db0b      	blt.n	8001c8a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c72:	79fb      	ldrb	r3, [r7, #7]
 8001c74:	f003 021f 	and.w	r2, r3, #31
 8001c78:	4907      	ldr	r1, [pc, #28]	@ (8001c98 <__NVIC_EnableIRQ+0x38>)
 8001c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c7e:	095b      	lsrs	r3, r3, #5
 8001c80:	2001      	movs	r0, #1
 8001c82:	fa00 f202 	lsl.w	r2, r0, r2
 8001c86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c8a:	bf00      	nop
 8001c8c:	370c      	adds	r7, #12
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	e000e100 	.word	0xe000e100

08001c9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	6039      	str	r1, [r7, #0]
 8001ca6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ca8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	db0a      	blt.n	8001cc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	b2da      	uxtb	r2, r3
 8001cb4:	490c      	ldr	r1, [pc, #48]	@ (8001ce8 <__NVIC_SetPriority+0x4c>)
 8001cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cba:	0112      	lsls	r2, r2, #4
 8001cbc:	b2d2      	uxtb	r2, r2
 8001cbe:	440b      	add	r3, r1
 8001cc0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cc4:	e00a      	b.n	8001cdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	b2da      	uxtb	r2, r3
 8001cca:	4908      	ldr	r1, [pc, #32]	@ (8001cec <__NVIC_SetPriority+0x50>)
 8001ccc:	79fb      	ldrb	r3, [r7, #7]
 8001cce:	f003 030f 	and.w	r3, r3, #15
 8001cd2:	3b04      	subs	r3, #4
 8001cd4:	0112      	lsls	r2, r2, #4
 8001cd6:	b2d2      	uxtb	r2, r2
 8001cd8:	440b      	add	r3, r1
 8001cda:	761a      	strb	r2, [r3, #24]
}
 8001cdc:	bf00      	nop
 8001cde:	370c      	adds	r7, #12
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr
 8001ce8:	e000e100 	.word	0xe000e100
 8001cec:	e000ed00 	.word	0xe000ed00

08001cf0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b089      	sub	sp, #36	@ 0x24
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	60f8      	str	r0, [r7, #12]
 8001cf8:	60b9      	str	r1, [r7, #8]
 8001cfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	f003 0307 	and.w	r3, r3, #7
 8001d02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d04:	69fb      	ldr	r3, [r7, #28]
 8001d06:	f1c3 0307 	rsb	r3, r3, #7
 8001d0a:	2b04      	cmp	r3, #4
 8001d0c:	bf28      	it	cs
 8001d0e:	2304      	movcs	r3, #4
 8001d10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	3304      	adds	r3, #4
 8001d16:	2b06      	cmp	r3, #6
 8001d18:	d902      	bls.n	8001d20 <NVIC_EncodePriority+0x30>
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	3b03      	subs	r3, #3
 8001d1e:	e000      	b.n	8001d22 <NVIC_EncodePriority+0x32>
 8001d20:	2300      	movs	r3, #0
 8001d22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d24:	f04f 32ff 	mov.w	r2, #4294967295
 8001d28:	69bb      	ldr	r3, [r7, #24]
 8001d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2e:	43da      	mvns	r2, r3
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	401a      	ands	r2, r3
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d38:	f04f 31ff 	mov.w	r1, #4294967295
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d42:	43d9      	mvns	r1, r3
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d48:	4313      	orrs	r3, r2
         );
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3724      	adds	r7, #36	@ 0x24
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr
	...

08001d58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	3b01      	subs	r3, #1
 8001d64:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d68:	d301      	bcc.n	8001d6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e00f      	b.n	8001d8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d6e:	4a0a      	ldr	r2, [pc, #40]	@ (8001d98 <SysTick_Config+0x40>)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	3b01      	subs	r3, #1
 8001d74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d76:	210f      	movs	r1, #15
 8001d78:	f04f 30ff 	mov.w	r0, #4294967295
 8001d7c:	f7ff ff8e 	bl	8001c9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d80:	4b05      	ldr	r3, [pc, #20]	@ (8001d98 <SysTick_Config+0x40>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d86:	4b04      	ldr	r3, [pc, #16]	@ (8001d98 <SysTick_Config+0x40>)
 8001d88:	2207      	movs	r2, #7
 8001d8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d8c:	2300      	movs	r3, #0
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3708      	adds	r7, #8
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	e000e010 	.word	0xe000e010

08001d9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001da4:	6878      	ldr	r0, [r7, #4]
 8001da6:	f7ff ff29 	bl	8001bfc <__NVIC_SetPriorityGrouping>
}
 8001daa:	bf00      	nop
 8001dac:	3708      	adds	r7, #8
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}

08001db2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001db2:	b580      	push	{r7, lr}
 8001db4:	b086      	sub	sp, #24
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	4603      	mov	r3, r0
 8001dba:	60b9      	str	r1, [r7, #8]
 8001dbc:	607a      	str	r2, [r7, #4]
 8001dbe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dc4:	f7ff ff3e 	bl	8001c44 <__NVIC_GetPriorityGrouping>
 8001dc8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dca:	687a      	ldr	r2, [r7, #4]
 8001dcc:	68b9      	ldr	r1, [r7, #8]
 8001dce:	6978      	ldr	r0, [r7, #20]
 8001dd0:	f7ff ff8e 	bl	8001cf0 <NVIC_EncodePriority>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dda:	4611      	mov	r1, r2
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f7ff ff5d 	bl	8001c9c <__NVIC_SetPriority>
}
 8001de2:	bf00      	nop
 8001de4:	3718      	adds	r7, #24
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}

08001dea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dea:	b580      	push	{r7, lr}
 8001dec:	b082      	sub	sp, #8
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	4603      	mov	r3, r0
 8001df2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001df4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f7ff ff31 	bl	8001c60 <__NVIC_EnableIRQ>
}
 8001dfe:	bf00      	nop
 8001e00:	3708      	adds	r7, #8
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}

08001e06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e06:	b580      	push	{r7, lr}
 8001e08:	b082      	sub	sp, #8
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f7ff ffa2 	bl	8001d58 <SysTick_Config>
 8001e14:	4603      	mov	r3, r0
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3708      	adds	r7, #8
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
	...

08001e20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b089      	sub	sp, #36	@ 0x24
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
 8001e28:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e32:	2300      	movs	r3, #0
 8001e34:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e36:	2300      	movs	r3, #0
 8001e38:	61fb      	str	r3, [r7, #28]
 8001e3a:	e16b      	b.n	8002114 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	fa02 f303 	lsl.w	r3, r2, r3
 8001e44:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	697a      	ldr	r2, [r7, #20]
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e50:	693a      	ldr	r2, [r7, #16]
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	429a      	cmp	r2, r3
 8001e56:	f040 815a 	bne.w	800210e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	f003 0303 	and.w	r3, r3, #3
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d005      	beq.n	8001e72 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	d130      	bne.n	8001ed4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e78:	69fb      	ldr	r3, [r7, #28]
 8001e7a:	005b      	lsls	r3, r3, #1
 8001e7c:	2203      	movs	r2, #3
 8001e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e82:	43db      	mvns	r3, r3
 8001e84:	69ba      	ldr	r2, [r7, #24]
 8001e86:	4013      	ands	r3, r2
 8001e88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	68da      	ldr	r2, [r3, #12]
 8001e8e:	69fb      	ldr	r3, [r7, #28]
 8001e90:	005b      	lsls	r3, r3, #1
 8001e92:	fa02 f303 	lsl.w	r3, r2, r3
 8001e96:	69ba      	ldr	r2, [r7, #24]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	69ba      	ldr	r2, [r7, #24]
 8001ea0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb0:	43db      	mvns	r3, r3
 8001eb2:	69ba      	ldr	r2, [r7, #24]
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	091b      	lsrs	r3, r3, #4
 8001ebe:	f003 0201 	and.w	r2, r3, #1
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec8:	69ba      	ldr	r2, [r7, #24]
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	69ba      	ldr	r2, [r7, #24]
 8001ed2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f003 0303 	and.w	r3, r3, #3
 8001edc:	2b03      	cmp	r3, #3
 8001ede:	d017      	beq.n	8001f10 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	005b      	lsls	r3, r3, #1
 8001eea:	2203      	movs	r2, #3
 8001eec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef0:	43db      	mvns	r3, r3
 8001ef2:	69ba      	ldr	r2, [r7, #24]
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	689a      	ldr	r2, [r3, #8]
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	005b      	lsls	r3, r3, #1
 8001f00:	fa02 f303 	lsl.w	r3, r2, r3
 8001f04:	69ba      	ldr	r2, [r7, #24]
 8001f06:	4313      	orrs	r3, r2
 8001f08:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	69ba      	ldr	r2, [r7, #24]
 8001f0e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f003 0303 	and.w	r3, r3, #3
 8001f18:	2b02      	cmp	r3, #2
 8001f1a:	d123      	bne.n	8001f64 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	08da      	lsrs	r2, r3, #3
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	3208      	adds	r2, #8
 8001f24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f28:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	f003 0307 	and.w	r3, r3, #7
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	220f      	movs	r2, #15
 8001f34:	fa02 f303 	lsl.w	r3, r2, r3
 8001f38:	43db      	mvns	r3, r3
 8001f3a:	69ba      	ldr	r2, [r7, #24]
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	691a      	ldr	r2, [r3, #16]
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	f003 0307 	and.w	r3, r3, #7
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f50:	69ba      	ldr	r2, [r7, #24]
 8001f52:	4313      	orrs	r3, r2
 8001f54:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	08da      	lsrs	r2, r3, #3
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	3208      	adds	r2, #8
 8001f5e:	69b9      	ldr	r1, [r7, #24]
 8001f60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	005b      	lsls	r3, r3, #1
 8001f6e:	2203      	movs	r2, #3
 8001f70:	fa02 f303 	lsl.w	r3, r2, r3
 8001f74:	43db      	mvns	r3, r3
 8001f76:	69ba      	ldr	r2, [r7, #24]
 8001f78:	4013      	ands	r3, r2
 8001f7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f003 0203 	and.w	r2, r3, #3
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	005b      	lsls	r3, r3, #1
 8001f88:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8c:	69ba      	ldr	r2, [r7, #24]
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	69ba      	ldr	r2, [r7, #24]
 8001f96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	f000 80b4 	beq.w	800210e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	60fb      	str	r3, [r7, #12]
 8001faa:	4b60      	ldr	r3, [pc, #384]	@ (800212c <HAL_GPIO_Init+0x30c>)
 8001fac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fae:	4a5f      	ldr	r2, [pc, #380]	@ (800212c <HAL_GPIO_Init+0x30c>)
 8001fb0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001fb4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fb6:	4b5d      	ldr	r3, [pc, #372]	@ (800212c <HAL_GPIO_Init+0x30c>)
 8001fb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fbe:	60fb      	str	r3, [r7, #12]
 8001fc0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fc2:	4a5b      	ldr	r2, [pc, #364]	@ (8002130 <HAL_GPIO_Init+0x310>)
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	089b      	lsrs	r3, r3, #2
 8001fc8:	3302      	adds	r3, #2
 8001fca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	f003 0303 	and.w	r3, r3, #3
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	220f      	movs	r2, #15
 8001fda:	fa02 f303 	lsl.w	r3, r2, r3
 8001fde:	43db      	mvns	r3, r3
 8001fe0:	69ba      	ldr	r2, [r7, #24]
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4a52      	ldr	r2, [pc, #328]	@ (8002134 <HAL_GPIO_Init+0x314>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d02b      	beq.n	8002046 <HAL_GPIO_Init+0x226>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4a51      	ldr	r2, [pc, #324]	@ (8002138 <HAL_GPIO_Init+0x318>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d025      	beq.n	8002042 <HAL_GPIO_Init+0x222>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4a50      	ldr	r2, [pc, #320]	@ (800213c <HAL_GPIO_Init+0x31c>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d01f      	beq.n	800203e <HAL_GPIO_Init+0x21e>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4a4f      	ldr	r2, [pc, #316]	@ (8002140 <HAL_GPIO_Init+0x320>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d019      	beq.n	800203a <HAL_GPIO_Init+0x21a>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4a4e      	ldr	r2, [pc, #312]	@ (8002144 <HAL_GPIO_Init+0x324>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d013      	beq.n	8002036 <HAL_GPIO_Init+0x216>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4a4d      	ldr	r2, [pc, #308]	@ (8002148 <HAL_GPIO_Init+0x328>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d00d      	beq.n	8002032 <HAL_GPIO_Init+0x212>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4a4c      	ldr	r2, [pc, #304]	@ (800214c <HAL_GPIO_Init+0x32c>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d007      	beq.n	800202e <HAL_GPIO_Init+0x20e>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a4b      	ldr	r2, [pc, #300]	@ (8002150 <HAL_GPIO_Init+0x330>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d101      	bne.n	800202a <HAL_GPIO_Init+0x20a>
 8002026:	2307      	movs	r3, #7
 8002028:	e00e      	b.n	8002048 <HAL_GPIO_Init+0x228>
 800202a:	2308      	movs	r3, #8
 800202c:	e00c      	b.n	8002048 <HAL_GPIO_Init+0x228>
 800202e:	2306      	movs	r3, #6
 8002030:	e00a      	b.n	8002048 <HAL_GPIO_Init+0x228>
 8002032:	2305      	movs	r3, #5
 8002034:	e008      	b.n	8002048 <HAL_GPIO_Init+0x228>
 8002036:	2304      	movs	r3, #4
 8002038:	e006      	b.n	8002048 <HAL_GPIO_Init+0x228>
 800203a:	2303      	movs	r3, #3
 800203c:	e004      	b.n	8002048 <HAL_GPIO_Init+0x228>
 800203e:	2302      	movs	r3, #2
 8002040:	e002      	b.n	8002048 <HAL_GPIO_Init+0x228>
 8002042:	2301      	movs	r3, #1
 8002044:	e000      	b.n	8002048 <HAL_GPIO_Init+0x228>
 8002046:	2300      	movs	r3, #0
 8002048:	69fa      	ldr	r2, [r7, #28]
 800204a:	f002 0203 	and.w	r2, r2, #3
 800204e:	0092      	lsls	r2, r2, #2
 8002050:	4093      	lsls	r3, r2
 8002052:	69ba      	ldr	r2, [r7, #24]
 8002054:	4313      	orrs	r3, r2
 8002056:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002058:	4935      	ldr	r1, [pc, #212]	@ (8002130 <HAL_GPIO_Init+0x310>)
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	089b      	lsrs	r3, r3, #2
 800205e:	3302      	adds	r3, #2
 8002060:	69ba      	ldr	r2, [r7, #24]
 8002062:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002066:	4b3b      	ldr	r3, [pc, #236]	@ (8002154 <HAL_GPIO_Init+0x334>)
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	43db      	mvns	r3, r3
 8002070:	69ba      	ldr	r2, [r7, #24]
 8002072:	4013      	ands	r3, r2
 8002074:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800207e:	2b00      	cmp	r3, #0
 8002080:	d003      	beq.n	800208a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002082:	69ba      	ldr	r2, [r7, #24]
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	4313      	orrs	r3, r2
 8002088:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800208a:	4a32      	ldr	r2, [pc, #200]	@ (8002154 <HAL_GPIO_Init+0x334>)
 800208c:	69bb      	ldr	r3, [r7, #24]
 800208e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002090:	4b30      	ldr	r3, [pc, #192]	@ (8002154 <HAL_GPIO_Init+0x334>)
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	43db      	mvns	r3, r3
 800209a:	69ba      	ldr	r2, [r7, #24]
 800209c:	4013      	ands	r3, r2
 800209e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d003      	beq.n	80020b4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80020ac:	69ba      	ldr	r2, [r7, #24]
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020b4:	4a27      	ldr	r2, [pc, #156]	@ (8002154 <HAL_GPIO_Init+0x334>)
 80020b6:	69bb      	ldr	r3, [r7, #24]
 80020b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80020ba:	4b26      	ldr	r3, [pc, #152]	@ (8002154 <HAL_GPIO_Init+0x334>)
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	43db      	mvns	r3, r3
 80020c4:	69ba      	ldr	r2, [r7, #24]
 80020c6:	4013      	ands	r3, r2
 80020c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d003      	beq.n	80020de <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80020d6:	69ba      	ldr	r2, [r7, #24]
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	4313      	orrs	r3, r2
 80020dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020de:	4a1d      	ldr	r2, [pc, #116]	@ (8002154 <HAL_GPIO_Init+0x334>)
 80020e0:	69bb      	ldr	r3, [r7, #24]
 80020e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020e4:	4b1b      	ldr	r3, [pc, #108]	@ (8002154 <HAL_GPIO_Init+0x334>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	43db      	mvns	r3, r3
 80020ee:	69ba      	ldr	r2, [r7, #24]
 80020f0:	4013      	ands	r3, r2
 80020f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d003      	beq.n	8002108 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002100:	69ba      	ldr	r2, [r7, #24]
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	4313      	orrs	r3, r2
 8002106:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002108:	4a12      	ldr	r2, [pc, #72]	@ (8002154 <HAL_GPIO_Init+0x334>)
 800210a:	69bb      	ldr	r3, [r7, #24]
 800210c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	3301      	adds	r3, #1
 8002112:	61fb      	str	r3, [r7, #28]
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	2b0f      	cmp	r3, #15
 8002118:	f67f ae90 	bls.w	8001e3c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800211c:	bf00      	nop
 800211e:	bf00      	nop
 8002120:	3724      	adds	r7, #36	@ 0x24
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr
 800212a:	bf00      	nop
 800212c:	40023800 	.word	0x40023800
 8002130:	40013800 	.word	0x40013800
 8002134:	40020000 	.word	0x40020000
 8002138:	40020400 	.word	0x40020400
 800213c:	40020800 	.word	0x40020800
 8002140:	40020c00 	.word	0x40020c00
 8002144:	40021000 	.word	0x40021000
 8002148:	40021400 	.word	0x40021400
 800214c:	40021800 	.word	0x40021800
 8002150:	40021c00 	.word	0x40021c00
 8002154:	40013c00 	.word	0x40013c00

08002158 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002158:	b480      	push	{r7}
 800215a:	b085      	sub	sp, #20
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	460b      	mov	r3, r1
 8002162:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	695b      	ldr	r3, [r3, #20]
 8002168:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800216a:	887a      	ldrh	r2, [r7, #2]
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	4013      	ands	r3, r2
 8002170:	041a      	lsls	r2, r3, #16
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	43d9      	mvns	r1, r3
 8002176:	887b      	ldrh	r3, [r7, #2]
 8002178:	400b      	ands	r3, r1
 800217a:	431a      	orrs	r2, r3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	619a      	str	r2, [r3, #24]
}
 8002180:	bf00      	nop
 8002182:	3714      	adds	r7, #20
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr

0800218c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b086      	sub	sp, #24
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d101      	bne.n	800219e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e267      	b.n	800266e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0301 	and.w	r3, r3, #1
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d075      	beq.n	8002296 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80021aa:	4b88      	ldr	r3, [pc, #544]	@ (80023cc <HAL_RCC_OscConfig+0x240>)
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	f003 030c 	and.w	r3, r3, #12
 80021b2:	2b04      	cmp	r3, #4
 80021b4:	d00c      	beq.n	80021d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021b6:	4b85      	ldr	r3, [pc, #532]	@ (80023cc <HAL_RCC_OscConfig+0x240>)
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80021be:	2b08      	cmp	r3, #8
 80021c0:	d112      	bne.n	80021e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021c2:	4b82      	ldr	r3, [pc, #520]	@ (80023cc <HAL_RCC_OscConfig+0x240>)
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021ca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80021ce:	d10b      	bne.n	80021e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021d0:	4b7e      	ldr	r3, [pc, #504]	@ (80023cc <HAL_RCC_OscConfig+0x240>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d05b      	beq.n	8002294 <HAL_RCC_OscConfig+0x108>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d157      	bne.n	8002294 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	e242      	b.n	800266e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021f0:	d106      	bne.n	8002200 <HAL_RCC_OscConfig+0x74>
 80021f2:	4b76      	ldr	r3, [pc, #472]	@ (80023cc <HAL_RCC_OscConfig+0x240>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a75      	ldr	r2, [pc, #468]	@ (80023cc <HAL_RCC_OscConfig+0x240>)
 80021f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021fc:	6013      	str	r3, [r2, #0]
 80021fe:	e01d      	b.n	800223c <HAL_RCC_OscConfig+0xb0>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002208:	d10c      	bne.n	8002224 <HAL_RCC_OscConfig+0x98>
 800220a:	4b70      	ldr	r3, [pc, #448]	@ (80023cc <HAL_RCC_OscConfig+0x240>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a6f      	ldr	r2, [pc, #444]	@ (80023cc <HAL_RCC_OscConfig+0x240>)
 8002210:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002214:	6013      	str	r3, [r2, #0]
 8002216:	4b6d      	ldr	r3, [pc, #436]	@ (80023cc <HAL_RCC_OscConfig+0x240>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a6c      	ldr	r2, [pc, #432]	@ (80023cc <HAL_RCC_OscConfig+0x240>)
 800221c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002220:	6013      	str	r3, [r2, #0]
 8002222:	e00b      	b.n	800223c <HAL_RCC_OscConfig+0xb0>
 8002224:	4b69      	ldr	r3, [pc, #420]	@ (80023cc <HAL_RCC_OscConfig+0x240>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a68      	ldr	r2, [pc, #416]	@ (80023cc <HAL_RCC_OscConfig+0x240>)
 800222a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800222e:	6013      	str	r3, [r2, #0]
 8002230:	4b66      	ldr	r3, [pc, #408]	@ (80023cc <HAL_RCC_OscConfig+0x240>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a65      	ldr	r2, [pc, #404]	@ (80023cc <HAL_RCC_OscConfig+0x240>)
 8002236:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800223a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d013      	beq.n	800226c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002244:	f7fe fe38 	bl	8000eb8 <HAL_GetTick>
 8002248:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800224a:	e008      	b.n	800225e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800224c:	f7fe fe34 	bl	8000eb8 <HAL_GetTick>
 8002250:	4602      	mov	r2, r0
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	2b64      	cmp	r3, #100	@ 0x64
 8002258:	d901      	bls.n	800225e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800225a:	2303      	movs	r3, #3
 800225c:	e207      	b.n	800266e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800225e:	4b5b      	ldr	r3, [pc, #364]	@ (80023cc <HAL_RCC_OscConfig+0x240>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d0f0      	beq.n	800224c <HAL_RCC_OscConfig+0xc0>
 800226a:	e014      	b.n	8002296 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800226c:	f7fe fe24 	bl	8000eb8 <HAL_GetTick>
 8002270:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002272:	e008      	b.n	8002286 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002274:	f7fe fe20 	bl	8000eb8 <HAL_GetTick>
 8002278:	4602      	mov	r2, r0
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	2b64      	cmp	r3, #100	@ 0x64
 8002280:	d901      	bls.n	8002286 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002282:	2303      	movs	r3, #3
 8002284:	e1f3      	b.n	800266e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002286:	4b51      	ldr	r3, [pc, #324]	@ (80023cc <HAL_RCC_OscConfig+0x240>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d1f0      	bne.n	8002274 <HAL_RCC_OscConfig+0xe8>
 8002292:	e000      	b.n	8002296 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002294:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 0302 	and.w	r3, r3, #2
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d063      	beq.n	800236a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80022a2:	4b4a      	ldr	r3, [pc, #296]	@ (80023cc <HAL_RCC_OscConfig+0x240>)
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	f003 030c 	and.w	r3, r3, #12
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d00b      	beq.n	80022c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022ae:	4b47      	ldr	r3, [pc, #284]	@ (80023cc <HAL_RCC_OscConfig+0x240>)
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80022b6:	2b08      	cmp	r3, #8
 80022b8:	d11c      	bne.n	80022f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022ba:	4b44      	ldr	r3, [pc, #272]	@ (80023cc <HAL_RCC_OscConfig+0x240>)
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d116      	bne.n	80022f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022c6:	4b41      	ldr	r3, [pc, #260]	@ (80023cc <HAL_RCC_OscConfig+0x240>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0302 	and.w	r3, r3, #2
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d005      	beq.n	80022de <HAL_RCC_OscConfig+0x152>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	68db      	ldr	r3, [r3, #12]
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d001      	beq.n	80022de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e1c7      	b.n	800266e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022de:	4b3b      	ldr	r3, [pc, #236]	@ (80023cc <HAL_RCC_OscConfig+0x240>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	691b      	ldr	r3, [r3, #16]
 80022ea:	00db      	lsls	r3, r3, #3
 80022ec:	4937      	ldr	r1, [pc, #220]	@ (80023cc <HAL_RCC_OscConfig+0x240>)
 80022ee:	4313      	orrs	r3, r2
 80022f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022f2:	e03a      	b.n	800236a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d020      	beq.n	800233e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022fc:	4b34      	ldr	r3, [pc, #208]	@ (80023d0 <HAL_RCC_OscConfig+0x244>)
 80022fe:	2201      	movs	r2, #1
 8002300:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002302:	f7fe fdd9 	bl	8000eb8 <HAL_GetTick>
 8002306:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002308:	e008      	b.n	800231c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800230a:	f7fe fdd5 	bl	8000eb8 <HAL_GetTick>
 800230e:	4602      	mov	r2, r0
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	1ad3      	subs	r3, r2, r3
 8002314:	2b02      	cmp	r3, #2
 8002316:	d901      	bls.n	800231c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002318:	2303      	movs	r3, #3
 800231a:	e1a8      	b.n	800266e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800231c:	4b2b      	ldr	r3, [pc, #172]	@ (80023cc <HAL_RCC_OscConfig+0x240>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 0302 	and.w	r3, r3, #2
 8002324:	2b00      	cmp	r3, #0
 8002326:	d0f0      	beq.n	800230a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002328:	4b28      	ldr	r3, [pc, #160]	@ (80023cc <HAL_RCC_OscConfig+0x240>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	691b      	ldr	r3, [r3, #16]
 8002334:	00db      	lsls	r3, r3, #3
 8002336:	4925      	ldr	r1, [pc, #148]	@ (80023cc <HAL_RCC_OscConfig+0x240>)
 8002338:	4313      	orrs	r3, r2
 800233a:	600b      	str	r3, [r1, #0]
 800233c:	e015      	b.n	800236a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800233e:	4b24      	ldr	r3, [pc, #144]	@ (80023d0 <HAL_RCC_OscConfig+0x244>)
 8002340:	2200      	movs	r2, #0
 8002342:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002344:	f7fe fdb8 	bl	8000eb8 <HAL_GetTick>
 8002348:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800234a:	e008      	b.n	800235e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800234c:	f7fe fdb4 	bl	8000eb8 <HAL_GetTick>
 8002350:	4602      	mov	r2, r0
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	2b02      	cmp	r3, #2
 8002358:	d901      	bls.n	800235e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800235a:	2303      	movs	r3, #3
 800235c:	e187      	b.n	800266e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800235e:	4b1b      	ldr	r3, [pc, #108]	@ (80023cc <HAL_RCC_OscConfig+0x240>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 0302 	and.w	r3, r3, #2
 8002366:	2b00      	cmp	r3, #0
 8002368:	d1f0      	bne.n	800234c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 0308 	and.w	r3, r3, #8
 8002372:	2b00      	cmp	r3, #0
 8002374:	d036      	beq.n	80023e4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	695b      	ldr	r3, [r3, #20]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d016      	beq.n	80023ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800237e:	4b15      	ldr	r3, [pc, #84]	@ (80023d4 <HAL_RCC_OscConfig+0x248>)
 8002380:	2201      	movs	r2, #1
 8002382:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002384:	f7fe fd98 	bl	8000eb8 <HAL_GetTick>
 8002388:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800238a:	e008      	b.n	800239e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800238c:	f7fe fd94 	bl	8000eb8 <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	2b02      	cmp	r3, #2
 8002398:	d901      	bls.n	800239e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e167      	b.n	800266e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800239e:	4b0b      	ldr	r3, [pc, #44]	@ (80023cc <HAL_RCC_OscConfig+0x240>)
 80023a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023a2:	f003 0302 	and.w	r3, r3, #2
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d0f0      	beq.n	800238c <HAL_RCC_OscConfig+0x200>
 80023aa:	e01b      	b.n	80023e4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023ac:	4b09      	ldr	r3, [pc, #36]	@ (80023d4 <HAL_RCC_OscConfig+0x248>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023b2:	f7fe fd81 	bl	8000eb8 <HAL_GetTick>
 80023b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023b8:	e00e      	b.n	80023d8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023ba:	f7fe fd7d 	bl	8000eb8 <HAL_GetTick>
 80023be:	4602      	mov	r2, r0
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	1ad3      	subs	r3, r2, r3
 80023c4:	2b02      	cmp	r3, #2
 80023c6:	d907      	bls.n	80023d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80023c8:	2303      	movs	r3, #3
 80023ca:	e150      	b.n	800266e <HAL_RCC_OscConfig+0x4e2>
 80023cc:	40023800 	.word	0x40023800
 80023d0:	42470000 	.word	0x42470000
 80023d4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023d8:	4b88      	ldr	r3, [pc, #544]	@ (80025fc <HAL_RCC_OscConfig+0x470>)
 80023da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023dc:	f003 0302 	and.w	r3, r3, #2
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d1ea      	bne.n	80023ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 0304 	and.w	r3, r3, #4
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	f000 8097 	beq.w	8002520 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023f2:	2300      	movs	r3, #0
 80023f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023f6:	4b81      	ldr	r3, [pc, #516]	@ (80025fc <HAL_RCC_OscConfig+0x470>)
 80023f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d10f      	bne.n	8002422 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002402:	2300      	movs	r3, #0
 8002404:	60bb      	str	r3, [r7, #8]
 8002406:	4b7d      	ldr	r3, [pc, #500]	@ (80025fc <HAL_RCC_OscConfig+0x470>)
 8002408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800240a:	4a7c      	ldr	r2, [pc, #496]	@ (80025fc <HAL_RCC_OscConfig+0x470>)
 800240c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002410:	6413      	str	r3, [r2, #64]	@ 0x40
 8002412:	4b7a      	ldr	r3, [pc, #488]	@ (80025fc <HAL_RCC_OscConfig+0x470>)
 8002414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002416:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800241a:	60bb      	str	r3, [r7, #8]
 800241c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800241e:	2301      	movs	r3, #1
 8002420:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002422:	4b77      	ldr	r3, [pc, #476]	@ (8002600 <HAL_RCC_OscConfig+0x474>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800242a:	2b00      	cmp	r3, #0
 800242c:	d118      	bne.n	8002460 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800242e:	4b74      	ldr	r3, [pc, #464]	@ (8002600 <HAL_RCC_OscConfig+0x474>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a73      	ldr	r2, [pc, #460]	@ (8002600 <HAL_RCC_OscConfig+0x474>)
 8002434:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002438:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800243a:	f7fe fd3d 	bl	8000eb8 <HAL_GetTick>
 800243e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002440:	e008      	b.n	8002454 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002442:	f7fe fd39 	bl	8000eb8 <HAL_GetTick>
 8002446:	4602      	mov	r2, r0
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	2b02      	cmp	r3, #2
 800244e:	d901      	bls.n	8002454 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002450:	2303      	movs	r3, #3
 8002452:	e10c      	b.n	800266e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002454:	4b6a      	ldr	r3, [pc, #424]	@ (8002600 <HAL_RCC_OscConfig+0x474>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800245c:	2b00      	cmp	r3, #0
 800245e:	d0f0      	beq.n	8002442 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	2b01      	cmp	r3, #1
 8002466:	d106      	bne.n	8002476 <HAL_RCC_OscConfig+0x2ea>
 8002468:	4b64      	ldr	r3, [pc, #400]	@ (80025fc <HAL_RCC_OscConfig+0x470>)
 800246a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800246c:	4a63      	ldr	r2, [pc, #396]	@ (80025fc <HAL_RCC_OscConfig+0x470>)
 800246e:	f043 0301 	orr.w	r3, r3, #1
 8002472:	6713      	str	r3, [r2, #112]	@ 0x70
 8002474:	e01c      	b.n	80024b0 <HAL_RCC_OscConfig+0x324>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	2b05      	cmp	r3, #5
 800247c:	d10c      	bne.n	8002498 <HAL_RCC_OscConfig+0x30c>
 800247e:	4b5f      	ldr	r3, [pc, #380]	@ (80025fc <HAL_RCC_OscConfig+0x470>)
 8002480:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002482:	4a5e      	ldr	r2, [pc, #376]	@ (80025fc <HAL_RCC_OscConfig+0x470>)
 8002484:	f043 0304 	orr.w	r3, r3, #4
 8002488:	6713      	str	r3, [r2, #112]	@ 0x70
 800248a:	4b5c      	ldr	r3, [pc, #368]	@ (80025fc <HAL_RCC_OscConfig+0x470>)
 800248c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800248e:	4a5b      	ldr	r2, [pc, #364]	@ (80025fc <HAL_RCC_OscConfig+0x470>)
 8002490:	f043 0301 	orr.w	r3, r3, #1
 8002494:	6713      	str	r3, [r2, #112]	@ 0x70
 8002496:	e00b      	b.n	80024b0 <HAL_RCC_OscConfig+0x324>
 8002498:	4b58      	ldr	r3, [pc, #352]	@ (80025fc <HAL_RCC_OscConfig+0x470>)
 800249a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800249c:	4a57      	ldr	r2, [pc, #348]	@ (80025fc <HAL_RCC_OscConfig+0x470>)
 800249e:	f023 0301 	bic.w	r3, r3, #1
 80024a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80024a4:	4b55      	ldr	r3, [pc, #340]	@ (80025fc <HAL_RCC_OscConfig+0x470>)
 80024a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024a8:	4a54      	ldr	r2, [pc, #336]	@ (80025fc <HAL_RCC_OscConfig+0x470>)
 80024aa:	f023 0304 	bic.w	r3, r3, #4
 80024ae:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d015      	beq.n	80024e4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024b8:	f7fe fcfe 	bl	8000eb8 <HAL_GetTick>
 80024bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024be:	e00a      	b.n	80024d6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024c0:	f7fe fcfa 	bl	8000eb8 <HAL_GetTick>
 80024c4:	4602      	mov	r2, r0
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d901      	bls.n	80024d6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80024d2:	2303      	movs	r3, #3
 80024d4:	e0cb      	b.n	800266e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024d6:	4b49      	ldr	r3, [pc, #292]	@ (80025fc <HAL_RCC_OscConfig+0x470>)
 80024d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024da:	f003 0302 	and.w	r3, r3, #2
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d0ee      	beq.n	80024c0 <HAL_RCC_OscConfig+0x334>
 80024e2:	e014      	b.n	800250e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024e4:	f7fe fce8 	bl	8000eb8 <HAL_GetTick>
 80024e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024ea:	e00a      	b.n	8002502 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024ec:	f7fe fce4 	bl	8000eb8 <HAL_GetTick>
 80024f0:	4602      	mov	r2, r0
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d901      	bls.n	8002502 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80024fe:	2303      	movs	r3, #3
 8002500:	e0b5      	b.n	800266e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002502:	4b3e      	ldr	r3, [pc, #248]	@ (80025fc <HAL_RCC_OscConfig+0x470>)
 8002504:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002506:	f003 0302 	and.w	r3, r3, #2
 800250a:	2b00      	cmp	r3, #0
 800250c:	d1ee      	bne.n	80024ec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800250e:	7dfb      	ldrb	r3, [r7, #23]
 8002510:	2b01      	cmp	r3, #1
 8002512:	d105      	bne.n	8002520 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002514:	4b39      	ldr	r3, [pc, #228]	@ (80025fc <HAL_RCC_OscConfig+0x470>)
 8002516:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002518:	4a38      	ldr	r2, [pc, #224]	@ (80025fc <HAL_RCC_OscConfig+0x470>)
 800251a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800251e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	699b      	ldr	r3, [r3, #24]
 8002524:	2b00      	cmp	r3, #0
 8002526:	f000 80a1 	beq.w	800266c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800252a:	4b34      	ldr	r3, [pc, #208]	@ (80025fc <HAL_RCC_OscConfig+0x470>)
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	f003 030c 	and.w	r3, r3, #12
 8002532:	2b08      	cmp	r3, #8
 8002534:	d05c      	beq.n	80025f0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	699b      	ldr	r3, [r3, #24]
 800253a:	2b02      	cmp	r3, #2
 800253c:	d141      	bne.n	80025c2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800253e:	4b31      	ldr	r3, [pc, #196]	@ (8002604 <HAL_RCC_OscConfig+0x478>)
 8002540:	2200      	movs	r2, #0
 8002542:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002544:	f7fe fcb8 	bl	8000eb8 <HAL_GetTick>
 8002548:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800254a:	e008      	b.n	800255e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800254c:	f7fe fcb4 	bl	8000eb8 <HAL_GetTick>
 8002550:	4602      	mov	r2, r0
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	2b02      	cmp	r3, #2
 8002558:	d901      	bls.n	800255e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800255a:	2303      	movs	r3, #3
 800255c:	e087      	b.n	800266e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800255e:	4b27      	ldr	r3, [pc, #156]	@ (80025fc <HAL_RCC_OscConfig+0x470>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d1f0      	bne.n	800254c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	69da      	ldr	r2, [r3, #28]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6a1b      	ldr	r3, [r3, #32]
 8002572:	431a      	orrs	r2, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002578:	019b      	lsls	r3, r3, #6
 800257a:	431a      	orrs	r2, r3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002580:	085b      	lsrs	r3, r3, #1
 8002582:	3b01      	subs	r3, #1
 8002584:	041b      	lsls	r3, r3, #16
 8002586:	431a      	orrs	r2, r3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800258c:	061b      	lsls	r3, r3, #24
 800258e:	491b      	ldr	r1, [pc, #108]	@ (80025fc <HAL_RCC_OscConfig+0x470>)
 8002590:	4313      	orrs	r3, r2
 8002592:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002594:	4b1b      	ldr	r3, [pc, #108]	@ (8002604 <HAL_RCC_OscConfig+0x478>)
 8002596:	2201      	movs	r2, #1
 8002598:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800259a:	f7fe fc8d 	bl	8000eb8 <HAL_GetTick>
 800259e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025a0:	e008      	b.n	80025b4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025a2:	f7fe fc89 	bl	8000eb8 <HAL_GetTick>
 80025a6:	4602      	mov	r2, r0
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d901      	bls.n	80025b4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80025b0:	2303      	movs	r3, #3
 80025b2:	e05c      	b.n	800266e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025b4:	4b11      	ldr	r3, [pc, #68]	@ (80025fc <HAL_RCC_OscConfig+0x470>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d0f0      	beq.n	80025a2 <HAL_RCC_OscConfig+0x416>
 80025c0:	e054      	b.n	800266c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025c2:	4b10      	ldr	r3, [pc, #64]	@ (8002604 <HAL_RCC_OscConfig+0x478>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025c8:	f7fe fc76 	bl	8000eb8 <HAL_GetTick>
 80025cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025ce:	e008      	b.n	80025e2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025d0:	f7fe fc72 	bl	8000eb8 <HAL_GetTick>
 80025d4:	4602      	mov	r2, r0
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	2b02      	cmp	r3, #2
 80025dc:	d901      	bls.n	80025e2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80025de:	2303      	movs	r3, #3
 80025e0:	e045      	b.n	800266e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025e2:	4b06      	ldr	r3, [pc, #24]	@ (80025fc <HAL_RCC_OscConfig+0x470>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d1f0      	bne.n	80025d0 <HAL_RCC_OscConfig+0x444>
 80025ee:	e03d      	b.n	800266c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	699b      	ldr	r3, [r3, #24]
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d107      	bne.n	8002608 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	e038      	b.n	800266e <HAL_RCC_OscConfig+0x4e2>
 80025fc:	40023800 	.word	0x40023800
 8002600:	40007000 	.word	0x40007000
 8002604:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002608:	4b1b      	ldr	r3, [pc, #108]	@ (8002678 <HAL_RCC_OscConfig+0x4ec>)
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	699b      	ldr	r3, [r3, #24]
 8002612:	2b01      	cmp	r3, #1
 8002614:	d028      	beq.n	8002668 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002620:	429a      	cmp	r2, r3
 8002622:	d121      	bne.n	8002668 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800262e:	429a      	cmp	r2, r3
 8002630:	d11a      	bne.n	8002668 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002632:	68fa      	ldr	r2, [r7, #12]
 8002634:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002638:	4013      	ands	r3, r2
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800263e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002640:	4293      	cmp	r3, r2
 8002642:	d111      	bne.n	8002668 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800264e:	085b      	lsrs	r3, r3, #1
 8002650:	3b01      	subs	r3, #1
 8002652:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002654:	429a      	cmp	r2, r3
 8002656:	d107      	bne.n	8002668 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002662:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002664:	429a      	cmp	r2, r3
 8002666:	d001      	beq.n	800266c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e000      	b.n	800266e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800266c:	2300      	movs	r3, #0
}
 800266e:	4618      	mov	r0, r3
 8002670:	3718      	adds	r7, #24
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	40023800 	.word	0x40023800

0800267c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b084      	sub	sp, #16
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d101      	bne.n	8002690 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e0cc      	b.n	800282a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002690:	4b68      	ldr	r3, [pc, #416]	@ (8002834 <HAL_RCC_ClockConfig+0x1b8>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0307 	and.w	r3, r3, #7
 8002698:	683a      	ldr	r2, [r7, #0]
 800269a:	429a      	cmp	r2, r3
 800269c:	d90c      	bls.n	80026b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800269e:	4b65      	ldr	r3, [pc, #404]	@ (8002834 <HAL_RCC_ClockConfig+0x1b8>)
 80026a0:	683a      	ldr	r2, [r7, #0]
 80026a2:	b2d2      	uxtb	r2, r2
 80026a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026a6:	4b63      	ldr	r3, [pc, #396]	@ (8002834 <HAL_RCC_ClockConfig+0x1b8>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 0307 	and.w	r3, r3, #7
 80026ae:	683a      	ldr	r2, [r7, #0]
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d001      	beq.n	80026b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e0b8      	b.n	800282a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 0302 	and.w	r3, r3, #2
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d020      	beq.n	8002706 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0304 	and.w	r3, r3, #4
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d005      	beq.n	80026dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026d0:	4b59      	ldr	r3, [pc, #356]	@ (8002838 <HAL_RCC_ClockConfig+0x1bc>)
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	4a58      	ldr	r2, [pc, #352]	@ (8002838 <HAL_RCC_ClockConfig+0x1bc>)
 80026d6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80026da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 0308 	and.w	r3, r3, #8
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d005      	beq.n	80026f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026e8:	4b53      	ldr	r3, [pc, #332]	@ (8002838 <HAL_RCC_ClockConfig+0x1bc>)
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	4a52      	ldr	r2, [pc, #328]	@ (8002838 <HAL_RCC_ClockConfig+0x1bc>)
 80026ee:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80026f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026f4:	4b50      	ldr	r3, [pc, #320]	@ (8002838 <HAL_RCC_ClockConfig+0x1bc>)
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	494d      	ldr	r1, [pc, #308]	@ (8002838 <HAL_RCC_ClockConfig+0x1bc>)
 8002702:	4313      	orrs	r3, r2
 8002704:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0301 	and.w	r3, r3, #1
 800270e:	2b00      	cmp	r3, #0
 8002710:	d044      	beq.n	800279c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	2b01      	cmp	r3, #1
 8002718:	d107      	bne.n	800272a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800271a:	4b47      	ldr	r3, [pc, #284]	@ (8002838 <HAL_RCC_ClockConfig+0x1bc>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d119      	bne.n	800275a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e07f      	b.n	800282a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	2b02      	cmp	r3, #2
 8002730:	d003      	beq.n	800273a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002736:	2b03      	cmp	r3, #3
 8002738:	d107      	bne.n	800274a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800273a:	4b3f      	ldr	r3, [pc, #252]	@ (8002838 <HAL_RCC_ClockConfig+0x1bc>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d109      	bne.n	800275a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e06f      	b.n	800282a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800274a:	4b3b      	ldr	r3, [pc, #236]	@ (8002838 <HAL_RCC_ClockConfig+0x1bc>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0302 	and.w	r3, r3, #2
 8002752:	2b00      	cmp	r3, #0
 8002754:	d101      	bne.n	800275a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e067      	b.n	800282a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800275a:	4b37      	ldr	r3, [pc, #220]	@ (8002838 <HAL_RCC_ClockConfig+0x1bc>)
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	f023 0203 	bic.w	r2, r3, #3
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	4934      	ldr	r1, [pc, #208]	@ (8002838 <HAL_RCC_ClockConfig+0x1bc>)
 8002768:	4313      	orrs	r3, r2
 800276a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800276c:	f7fe fba4 	bl	8000eb8 <HAL_GetTick>
 8002770:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002772:	e00a      	b.n	800278a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002774:	f7fe fba0 	bl	8000eb8 <HAL_GetTick>
 8002778:	4602      	mov	r2, r0
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002782:	4293      	cmp	r3, r2
 8002784:	d901      	bls.n	800278a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002786:	2303      	movs	r3, #3
 8002788:	e04f      	b.n	800282a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800278a:	4b2b      	ldr	r3, [pc, #172]	@ (8002838 <HAL_RCC_ClockConfig+0x1bc>)
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	f003 020c 	and.w	r2, r3, #12
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	429a      	cmp	r2, r3
 800279a:	d1eb      	bne.n	8002774 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800279c:	4b25      	ldr	r3, [pc, #148]	@ (8002834 <HAL_RCC_ClockConfig+0x1b8>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 0307 	and.w	r3, r3, #7
 80027a4:	683a      	ldr	r2, [r7, #0]
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d20c      	bcs.n	80027c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027aa:	4b22      	ldr	r3, [pc, #136]	@ (8002834 <HAL_RCC_ClockConfig+0x1b8>)
 80027ac:	683a      	ldr	r2, [r7, #0]
 80027ae:	b2d2      	uxtb	r2, r2
 80027b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027b2:	4b20      	ldr	r3, [pc, #128]	@ (8002834 <HAL_RCC_ClockConfig+0x1b8>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0307 	and.w	r3, r3, #7
 80027ba:	683a      	ldr	r2, [r7, #0]
 80027bc:	429a      	cmp	r2, r3
 80027be:	d001      	beq.n	80027c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e032      	b.n	800282a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 0304 	and.w	r3, r3, #4
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d008      	beq.n	80027e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027d0:	4b19      	ldr	r3, [pc, #100]	@ (8002838 <HAL_RCC_ClockConfig+0x1bc>)
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	4916      	ldr	r1, [pc, #88]	@ (8002838 <HAL_RCC_ClockConfig+0x1bc>)
 80027de:	4313      	orrs	r3, r2
 80027e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 0308 	and.w	r3, r3, #8
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d009      	beq.n	8002802 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027ee:	4b12      	ldr	r3, [pc, #72]	@ (8002838 <HAL_RCC_ClockConfig+0x1bc>)
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	691b      	ldr	r3, [r3, #16]
 80027fa:	00db      	lsls	r3, r3, #3
 80027fc:	490e      	ldr	r1, [pc, #56]	@ (8002838 <HAL_RCC_ClockConfig+0x1bc>)
 80027fe:	4313      	orrs	r3, r2
 8002800:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002802:	f000 f821 	bl	8002848 <HAL_RCC_GetSysClockFreq>
 8002806:	4602      	mov	r2, r0
 8002808:	4b0b      	ldr	r3, [pc, #44]	@ (8002838 <HAL_RCC_ClockConfig+0x1bc>)
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	091b      	lsrs	r3, r3, #4
 800280e:	f003 030f 	and.w	r3, r3, #15
 8002812:	490a      	ldr	r1, [pc, #40]	@ (800283c <HAL_RCC_ClockConfig+0x1c0>)
 8002814:	5ccb      	ldrb	r3, [r1, r3]
 8002816:	fa22 f303 	lsr.w	r3, r2, r3
 800281a:	4a09      	ldr	r2, [pc, #36]	@ (8002840 <HAL_RCC_ClockConfig+0x1c4>)
 800281c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800281e:	4b09      	ldr	r3, [pc, #36]	@ (8002844 <HAL_RCC_ClockConfig+0x1c8>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4618      	mov	r0, r3
 8002824:	f7fe fb04 	bl	8000e30 <HAL_InitTick>

  return HAL_OK;
 8002828:	2300      	movs	r3, #0
}
 800282a:	4618      	mov	r0, r3
 800282c:	3710      	adds	r7, #16
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	40023c00 	.word	0x40023c00
 8002838:	40023800 	.word	0x40023800
 800283c:	08002ad4 	.word	0x08002ad4
 8002840:	2000002c 	.word	0x2000002c
 8002844:	20000030 	.word	0x20000030

08002848 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002848:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800284c:	b094      	sub	sp, #80	@ 0x50
 800284e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002850:	2300      	movs	r3, #0
 8002852:	647b      	str	r3, [r7, #68]	@ 0x44
 8002854:	2300      	movs	r3, #0
 8002856:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002858:	2300      	movs	r3, #0
 800285a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800285c:	2300      	movs	r3, #0
 800285e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002860:	4b79      	ldr	r3, [pc, #484]	@ (8002a48 <HAL_RCC_GetSysClockFreq+0x200>)
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	f003 030c 	and.w	r3, r3, #12
 8002868:	2b08      	cmp	r3, #8
 800286a:	d00d      	beq.n	8002888 <HAL_RCC_GetSysClockFreq+0x40>
 800286c:	2b08      	cmp	r3, #8
 800286e:	f200 80e1 	bhi.w	8002a34 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002872:	2b00      	cmp	r3, #0
 8002874:	d002      	beq.n	800287c <HAL_RCC_GetSysClockFreq+0x34>
 8002876:	2b04      	cmp	r3, #4
 8002878:	d003      	beq.n	8002882 <HAL_RCC_GetSysClockFreq+0x3a>
 800287a:	e0db      	b.n	8002a34 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800287c:	4b73      	ldr	r3, [pc, #460]	@ (8002a4c <HAL_RCC_GetSysClockFreq+0x204>)
 800287e:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8002880:	e0db      	b.n	8002a3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002882:	4b73      	ldr	r3, [pc, #460]	@ (8002a50 <HAL_RCC_GetSysClockFreq+0x208>)
 8002884:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002886:	e0d8      	b.n	8002a3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002888:	4b6f      	ldr	r3, [pc, #444]	@ (8002a48 <HAL_RCC_GetSysClockFreq+0x200>)
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002890:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002892:	4b6d      	ldr	r3, [pc, #436]	@ (8002a48 <HAL_RCC_GetSysClockFreq+0x200>)
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800289a:	2b00      	cmp	r3, #0
 800289c:	d063      	beq.n	8002966 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800289e:	4b6a      	ldr	r3, [pc, #424]	@ (8002a48 <HAL_RCC_GetSysClockFreq+0x200>)
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	099b      	lsrs	r3, r3, #6
 80028a4:	2200      	movs	r2, #0
 80028a6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80028a8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80028aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80028b2:	2300      	movs	r3, #0
 80028b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80028b6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80028ba:	4622      	mov	r2, r4
 80028bc:	462b      	mov	r3, r5
 80028be:	f04f 0000 	mov.w	r0, #0
 80028c2:	f04f 0100 	mov.w	r1, #0
 80028c6:	0159      	lsls	r1, r3, #5
 80028c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028cc:	0150      	lsls	r0, r2, #5
 80028ce:	4602      	mov	r2, r0
 80028d0:	460b      	mov	r3, r1
 80028d2:	4621      	mov	r1, r4
 80028d4:	1a51      	subs	r1, r2, r1
 80028d6:	6139      	str	r1, [r7, #16]
 80028d8:	4629      	mov	r1, r5
 80028da:	eb63 0301 	sbc.w	r3, r3, r1
 80028de:	617b      	str	r3, [r7, #20]
 80028e0:	f04f 0200 	mov.w	r2, #0
 80028e4:	f04f 0300 	mov.w	r3, #0
 80028e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80028ec:	4659      	mov	r1, fp
 80028ee:	018b      	lsls	r3, r1, #6
 80028f0:	4651      	mov	r1, sl
 80028f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80028f6:	4651      	mov	r1, sl
 80028f8:	018a      	lsls	r2, r1, #6
 80028fa:	4651      	mov	r1, sl
 80028fc:	ebb2 0801 	subs.w	r8, r2, r1
 8002900:	4659      	mov	r1, fp
 8002902:	eb63 0901 	sbc.w	r9, r3, r1
 8002906:	f04f 0200 	mov.w	r2, #0
 800290a:	f04f 0300 	mov.w	r3, #0
 800290e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002912:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002916:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800291a:	4690      	mov	r8, r2
 800291c:	4699      	mov	r9, r3
 800291e:	4623      	mov	r3, r4
 8002920:	eb18 0303 	adds.w	r3, r8, r3
 8002924:	60bb      	str	r3, [r7, #8]
 8002926:	462b      	mov	r3, r5
 8002928:	eb49 0303 	adc.w	r3, r9, r3
 800292c:	60fb      	str	r3, [r7, #12]
 800292e:	f04f 0200 	mov.w	r2, #0
 8002932:	f04f 0300 	mov.w	r3, #0
 8002936:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800293a:	4629      	mov	r1, r5
 800293c:	024b      	lsls	r3, r1, #9
 800293e:	4621      	mov	r1, r4
 8002940:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002944:	4621      	mov	r1, r4
 8002946:	024a      	lsls	r2, r1, #9
 8002948:	4610      	mov	r0, r2
 800294a:	4619      	mov	r1, r3
 800294c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800294e:	2200      	movs	r2, #0
 8002950:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002952:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002954:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002958:	f7fd fc36 	bl	80001c8 <__aeabi_uldivmod>
 800295c:	4602      	mov	r2, r0
 800295e:	460b      	mov	r3, r1
 8002960:	4613      	mov	r3, r2
 8002962:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002964:	e058      	b.n	8002a18 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002966:	4b38      	ldr	r3, [pc, #224]	@ (8002a48 <HAL_RCC_GetSysClockFreq+0x200>)
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	099b      	lsrs	r3, r3, #6
 800296c:	2200      	movs	r2, #0
 800296e:	4618      	mov	r0, r3
 8002970:	4611      	mov	r1, r2
 8002972:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002976:	623b      	str	r3, [r7, #32]
 8002978:	2300      	movs	r3, #0
 800297a:	627b      	str	r3, [r7, #36]	@ 0x24
 800297c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002980:	4642      	mov	r2, r8
 8002982:	464b      	mov	r3, r9
 8002984:	f04f 0000 	mov.w	r0, #0
 8002988:	f04f 0100 	mov.w	r1, #0
 800298c:	0159      	lsls	r1, r3, #5
 800298e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002992:	0150      	lsls	r0, r2, #5
 8002994:	4602      	mov	r2, r0
 8002996:	460b      	mov	r3, r1
 8002998:	4641      	mov	r1, r8
 800299a:	ebb2 0a01 	subs.w	sl, r2, r1
 800299e:	4649      	mov	r1, r9
 80029a0:	eb63 0b01 	sbc.w	fp, r3, r1
 80029a4:	f04f 0200 	mov.w	r2, #0
 80029a8:	f04f 0300 	mov.w	r3, #0
 80029ac:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80029b0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80029b4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80029b8:	ebb2 040a 	subs.w	r4, r2, sl
 80029bc:	eb63 050b 	sbc.w	r5, r3, fp
 80029c0:	f04f 0200 	mov.w	r2, #0
 80029c4:	f04f 0300 	mov.w	r3, #0
 80029c8:	00eb      	lsls	r3, r5, #3
 80029ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029ce:	00e2      	lsls	r2, r4, #3
 80029d0:	4614      	mov	r4, r2
 80029d2:	461d      	mov	r5, r3
 80029d4:	4643      	mov	r3, r8
 80029d6:	18e3      	adds	r3, r4, r3
 80029d8:	603b      	str	r3, [r7, #0]
 80029da:	464b      	mov	r3, r9
 80029dc:	eb45 0303 	adc.w	r3, r5, r3
 80029e0:	607b      	str	r3, [r7, #4]
 80029e2:	f04f 0200 	mov.w	r2, #0
 80029e6:	f04f 0300 	mov.w	r3, #0
 80029ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 80029ee:	4629      	mov	r1, r5
 80029f0:	028b      	lsls	r3, r1, #10
 80029f2:	4621      	mov	r1, r4
 80029f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80029f8:	4621      	mov	r1, r4
 80029fa:	028a      	lsls	r2, r1, #10
 80029fc:	4610      	mov	r0, r2
 80029fe:	4619      	mov	r1, r3
 8002a00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a02:	2200      	movs	r2, #0
 8002a04:	61bb      	str	r3, [r7, #24]
 8002a06:	61fa      	str	r2, [r7, #28]
 8002a08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a0c:	f7fd fbdc 	bl	80001c8 <__aeabi_uldivmod>
 8002a10:	4602      	mov	r2, r0
 8002a12:	460b      	mov	r3, r1
 8002a14:	4613      	mov	r3, r2
 8002a16:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002a18:	4b0b      	ldr	r3, [pc, #44]	@ (8002a48 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	0c1b      	lsrs	r3, r3, #16
 8002a1e:	f003 0303 	and.w	r3, r3, #3
 8002a22:	3301      	adds	r3, #1
 8002a24:	005b      	lsls	r3, r3, #1
 8002a26:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8002a28:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002a2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002a2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a30:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002a32:	e002      	b.n	8002a3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a34:	4b05      	ldr	r3, [pc, #20]	@ (8002a4c <HAL_RCC_GetSysClockFreq+0x204>)
 8002a36:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002a38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a3a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3750      	adds	r7, #80	@ 0x50
 8002a40:	46bd      	mov	sp, r7
 8002a42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a46:	bf00      	nop
 8002a48:	40023800 	.word	0x40023800
 8002a4c:	00f42400 	.word	0x00f42400
 8002a50:	007a1200 	.word	0x007a1200

08002a54 <memset>:
 8002a54:	4402      	add	r2, r0
 8002a56:	4603      	mov	r3, r0
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d100      	bne.n	8002a5e <memset+0xa>
 8002a5c:	4770      	bx	lr
 8002a5e:	f803 1b01 	strb.w	r1, [r3], #1
 8002a62:	e7f9      	b.n	8002a58 <memset+0x4>

08002a64 <__libc_init_array>:
 8002a64:	b570      	push	{r4, r5, r6, lr}
 8002a66:	4d0d      	ldr	r5, [pc, #52]	@ (8002a9c <__libc_init_array+0x38>)
 8002a68:	4c0d      	ldr	r4, [pc, #52]	@ (8002aa0 <__libc_init_array+0x3c>)
 8002a6a:	1b64      	subs	r4, r4, r5
 8002a6c:	10a4      	asrs	r4, r4, #2
 8002a6e:	2600      	movs	r6, #0
 8002a70:	42a6      	cmp	r6, r4
 8002a72:	d109      	bne.n	8002a88 <__libc_init_array+0x24>
 8002a74:	4d0b      	ldr	r5, [pc, #44]	@ (8002aa4 <__libc_init_array+0x40>)
 8002a76:	4c0c      	ldr	r4, [pc, #48]	@ (8002aa8 <__libc_init_array+0x44>)
 8002a78:	f000 f818 	bl	8002aac <_init>
 8002a7c:	1b64      	subs	r4, r4, r5
 8002a7e:	10a4      	asrs	r4, r4, #2
 8002a80:	2600      	movs	r6, #0
 8002a82:	42a6      	cmp	r6, r4
 8002a84:	d105      	bne.n	8002a92 <__libc_init_array+0x2e>
 8002a86:	bd70      	pop	{r4, r5, r6, pc}
 8002a88:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a8c:	4798      	blx	r3
 8002a8e:	3601      	adds	r6, #1
 8002a90:	e7ee      	b.n	8002a70 <__libc_init_array+0xc>
 8002a92:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a96:	4798      	blx	r3
 8002a98:	3601      	adds	r6, #1
 8002a9a:	e7f2      	b.n	8002a82 <__libc_init_array+0x1e>
 8002a9c:	08002aec 	.word	0x08002aec
 8002aa0:	08002aec 	.word	0x08002aec
 8002aa4:	08002aec 	.word	0x08002aec
 8002aa8:	08002af0 	.word	0x08002af0

08002aac <_init>:
 8002aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002aae:	bf00      	nop
 8002ab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ab2:	bc08      	pop	{r3}
 8002ab4:	469e      	mov	lr, r3
 8002ab6:	4770      	bx	lr

08002ab8 <_fini>:
 8002ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002aba:	bf00      	nop
 8002abc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002abe:	bc08      	pop	{r3}
 8002ac0:	469e      	mov	lr, r3
 8002ac2:	4770      	bx	lr
